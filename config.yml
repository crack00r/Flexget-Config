

#########################################################################################################################config#by#snickers2k######
################### Global ########################################################################################################################
variables: options.yml # Includes Options.yml file (put in flexget folder besides config.yml)
#######
templates:
  global:
    ######################################## Misc
    redirect_url: yes
    plugin_priority:
      regexp: 250
    parsing:
      movie: '{? Parser.Movies ?}'
      series: '{? Parser.Series ?}'
    magnets: no
    ######## Some HTML setup
    headers:
      User-Agent: "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36"
    retry_failed:
      retry_time: 60 seconds
      retry_time_multiplier: 4
      max_retries: 6
    ######## Naming-Fixes
    pathscrub: windows  # Use Windows conform filenames (since Windows is the worst of all OS, what's working on Windows, should always work on Linux/Mac)
    manipulate:
    # fix nonsense
      - title:
          replace:            
            regexp: '.(Deutsch|Englisch).'
            format: ''
      - title:
          replace:
            regexp: '^\[[^\]]*\][^a-z0-9]*'
            format: ''
      - title:
          replace:
            regexp: '^{[^\]]*}[^a-z0-9]*'
            format: ''
      - title:
          replace:
            regexp: '^\([^\]]*\)[^a-z0-9]*'
            format: ''
      - title:
          replace:
            regexp: '\s?\]\[\s?'
            format: '@@'
      - title:
          replace:
            regexp: '\W?@@.*'
            format: ''
      - title:
          replace:
            regexp: 'tv-film|!|,|´|`|[|]'
            format: ''
    ## Locale-fixes
      - title:
          replace:
            regexp: 'ö'
            format: 'oe'
      - title:
          replace:
            regexp: 'ä'
            format: 'ae'
      - title:
          replace:
            regexp: 'ü'
            format: 'ue'
      - title:
          replace:
            regexp: 'ß'
            format: 'ss'
      - title:
          replace:
            regexp: 'é'
            format: 'e'

    ######################################## Global Exclude  (For testing: https://regex101.com)
    regexp:
      reject:
      # Release
        - \b(duo|tri|quadri|tetra|penta)logy\b # Movie-Collections (often we already have some single ones in our Library)
#        - \bcomplete\b   # Complete (usually stands for complete series - not working well with flexget)
#        - \bcollection\b   # Collections (usually stands for complete series - not working well with flexget)
        - \buntouched\b   # Untouched (usually complete BDs with extras - incompatible with Plex/Emby etc.)
        - \bdirectors.cut\b   # too often the extended Version has  parts without foreign language
        - \bextended\b # too often the extended Version has  parts without foreign language
        - \bread.nfo\b # usually means there is something in the nfo-file to read about, mostly likely about hardcoded subs or other "bad"-Info
#        - \bhdtv\b # HDTV
      # Video
        - \b((hd|)ts|telesync)\b   # Bad-Quality
        - \b((hd|)cam)\b   # Bad-Quality
        - \brucke([^\s]+)\b # ruckel/ruckeln/ruckelt/ruckelig ## German for "lagging", Bad-Quality 
        - \b(bd|dvd|)scr(\b|eener)\b   # BD- / DVD- / SCR(EENER)
        - \br(5|6)\b   # R5/6 (Region Release: Asia & East-Europe - usually bad Quality)
        - \b(un|)sub(|s|bed)\b # Subtitles (Sub / Subs / Subbed / Unsubbed)
        - \b(hc|hardcoded)\b # Subtitles (HC / Hardcoded)
        - \b(web|)blur(\b|rt|red)\b # Blurred-Subtitles
        - \biso\b # ISO-Files
      # Audio
        - \bflac\b   # flac
        - \b(ac3(.|))md|(mic(.|))dubbed\b # LD/Line-Dubbed (we want original Dubbed-Line (DL)
        - \b(ac3(.|))ld|(line(.|))dubbed\b # LD/Line-Dubbed (we want original Dubbed-Line (DL)

    ######################################## Global Log-Filter - what and how should be logged (flexget.log in the config directory)
#     log_filter:
#       task:
#         - marked seen
#         - because quality already downloaded
#         - because episode has already been downloaded
#         - Task does not have any
#       move:
#         - left because it exceeds safety value
#         - does not exists (anymore)
#       urlrewriter:
#         - URL rewritten to
#       enzyme.mkv:
#         - Reading
#         - Processing
#       enzyme.parsers.ebml.core:
#         - ignored
#         - Maximum level
#       subliminal.video:
#         - Scanning video
#       parser_internal:
#         - appears to be an episode pack
#       content_size:
#         - rejecting
#       search_rss:
#         - Error
#       assume_quality:
#         - ""
#       utils.requests:
#         - Waiting

###############################################################################################################################################
### Templates #################################################################################################################################
###############################################################################################################################################

  ######################################## Movie-Global
  movies_lookup:
    plugin_priority:
      manipulate: 255       # manipulate must fix the titles before metainfo_series.
    metainfo_movie: yes
    tmdb_lookup:
      language: de
    imdb_lookup: yes
    trakt_lookup:
      account: '{? trakt.acc ?}'
#    rottentomatoes_lookup: yes #Buggy - 403 Client Error: Forbidden
  ######################################## Series-Global
  series_lookup:
    plugin_priority:
      manipulate: 255       # manipulate must fix the titles before metainfo_series.
    metainfo_series: yes
    thetvdb_lookup:
      language: de
    trakt_lookup:
      account: '{? trakt.acc ?}' 
    set:
      tvdb_language: de
  ######################################## No_Seen
  no_seen:
    disable:
      - seen
      - seen_info_hash
      - seen_movies
  ######################################## Download Streams
  Movie_Streams:
    inputs:
      - rss: '{? flexget.path ?}/External-Plugins/HDWorld-Movies-Feed/HDWorld.xml'
      - rss: 'https://nima4k.org/rss_movies.xml'
      - rss: '{? flexget.path ?}/External-Plugins/HDWorld-3D-Feed/HDWorld.xml'
#      - rss: '{? flexget.path ?}/External-Plugins/HDArea-Feed/HDArea.xml' #not working right now

  Series_Streams:
    inputs:
      - rss: '{? flexget.path ?}/External-Plugins/HDWorld-Series-Feed/HDWorld.xml' # HDWorld
      - rss: '{? flexget.path ?}/External-Plugins/Serienjunkies-Feed/rss_feed_1.xml' # SJ
      - rss: '{? flexget.path ?}/External-Plugins/Serienjunkies-Feed/rss_feed_2.xml'
      - rss: '{? flexget.path ?}/External-Plugins/Serienjunkies-Feed/rss_feed_3.xml'
      - rss: '{? flexget.path ?}/External-Plugins/Serienjunkies-Feed/rss_feed_4.xml'
      - rss: '{? flexget.path ?}/External-Plugins/Serienjunkies-Feed/rss_feed_5.xml'
      - rss: '{? flexget.path ?}/External-Plugins/Serienjunkies-Feed/rss_feed_6.xml'
      - rss: '{? flexget.path ?}/External-Plugins/Serienjunkies-Feed/rss_feed_7.xml'
      - rss: '{? flexget.path ?}/External-Plugins/Serienjunkies-Feed/rss_feed_8.xml'
      - rss: '{? flexget.path ?}/External-Plugins/Serienjunkies-Feed/rss_feed_9.xml'
      

  ######################################## Enable/Disable Discover
  Discover-enable-Backfill:
    discover:
      what:
        - next_series_episodes:
            backfill: yes
            from_start: yes
        - next_trakt_episodes:
            account: '{? trakt.acc ?}'
            context: collected
            list: collection
            position: next
            strip_dates: yes
      from:
        - searchSerienjunkies:
            hoster: '{? Settings.Hoster ?}'
            language: '{? Settings.Language ?}'
            staffelpack: '{? series.Staffelpack ?}'
    no_entries_ok: yes

  Discover-disable-Backfill:
    discover:
      what:
        - next_series_episodes:
            backfill: no
            from_start: no
        - next_trakt_episodes:
            account: '{? trakt.acc ?}'
            context: collected
            list: collection
            position: next
            strip_dates: yes
      from:
        - searchSerienjunkies:
            hoster: '{? Settings.Hoster ?}'
            language: '{? Settings.Language ?}'
            staffelpack: '{? series.Staffelpack ?}'
    no_entries_ok: yes

  ######################################## Enable/Disable SERIES Upgrade

  enable-Upgrade-Series:
    configure_series:
      settings:
        target: '{? quality.main ?}'
        quality: '{? quality.low ?}'
        propers: 2 weeks        
        timeframe: 24 hours
        identified_by: ep
        tracking: '{? series.tracking ?}'
        upgrade: yes 
        season_packs: '{? series.season_packs ?}'
      from:
        trakt_list:
          account: '{? trakt.acc ?}'
          list: collection
          type: shows
          strip_dates: yes
          language: de
    exists_series:
      path: "{? filesystem.mountpoint.series ?}/{{series_name}}"
      allow_different_qualities: '{? series.different_qualities ?}'

  disable-Upgrade-Series:
    configure_series:
      settings:
        target: '{? quality.main ?}'
        quality: '{? quality.low ?}'
        propers: 2 weeks        
        timeframe: 24 hours
        identified_by: ep
        tracking: '{? series.tracking ?}'
        upgrade: no
        season_packs: '{? series.season_packs ?}'
      from:
        trakt_list:
          account: '{? trakt.acc ?}'
          list: collection
          type: shows
          strip_dates: yes
          language: de

  ######################################## Enable/Disable MOVIES Upgrade

  enable-Upgrade-Movies:
    exists_movie:
      path: 
       - "{? filesystem.mountpoint.movies ?}/"
       - "{? DLFolder ?}/{? DLFolderArchive ?}/"
      allow_different_qualities: '{? movies.different_qualities ?}'
      lookup: imdb

  disable-Upgrade-Movies:
    exec:
      - echo "Movie Upgrade Disabled"


  ######################################## Enable/Disable Special (Author) Tasks
  enable-Download_Second_IMDb_Movies:
    manual: no
  disable-Download_Second_IMDb_Movies:
    manual: yes    

  enable-Sync_Main_IMDb_to_Second:
    manual: no
  disable-Sync_Main_IMDb_to_Second:
    manual: yes  

  enable-Studio_Downloads:
    manual: no
  disable-Studio_Downloads:
    manual: yes 

  enable-Movie_Size_Main:
    content_size:
      min: 2000 #"'{? Minimum_Movie_Size_Main ?}'"
      max: 30000 #"'{? Maximum_Movie_Size_Main ?}'"
  disable-Movie_Size_Main:
    exec:
      - echo "no Movie-Size to consider" 

  enable-Movie_Size_Low:
    content_size:
      min: 1500 #"'{? Minimum_Movie_Size_Low ?}'"
      max: 10000 #"'{? Maximum_Movie_Size_Low ?}'"
  disable-Movie_Size_Low:
    exec:
      - echo "no Movie-Size to consider" 

  enable-Download_Best_on_IMDb:
    if:
      - imdb_year < now.year - 2:
          imdb:
            min_score: 5.0
            min_votes: 100000
      - imdb_year < now.year - 5:
          imdb:
            min_score: 5.5
            min_votes: 200000
      - imdb_year < now.year - 15:
          imdb:
            min_score: 5.7
            min_votes: 300000
      - imdb_year < now.year - 100:
          imdb:
            min_score: 6.0
            min_votes: 400000
      - "set(['animation']).issubset(set(imdb_genres or []))":
          imdb:
            min_score: 6.0
            min_votes: 50000

  disable-Download_Best_on_IMDb:
    exec:
      - echo "Not loading Best on IMDb" 

  enable-YouTube_Downloads: 
    manual: no
  disable-YouTube_Downloads: 
    manual: yes

  enable-Download_Specials: 
    include: '{? Specials1 ?}.yml'
  disable-Download_Specials: 
    manual: yes
    
  enable-Download_Specials2: 
    include: '{? Specials2 ?}.yml'
  disable-Download_Specials2: 
    manual: yes
    
  enable-Download_Sports: 
    manual: no
  disable-Download_Sports: 
    manual: yes

  enable-Download_eBooks: 
    include: eBooks.yml
  disable-Download_eBooks:
    manual: yes

  enable-OnHold: 
    exec:
      - echo "OnHold Series activated"
    crossmatch:
      from:
        - trakt_list:
            account: '{? trakt.acc ?}'
            list: '{? trakt.OnHold ?}'
            type: shows
      fields:
        - imdb_id
      action: reject
  disable-OnHold:
    exec:
      - echo "Not use OnHold"

  enable-Canceled: 
    exec:
      - echo "Stop Downloading canceled Series"
    if:     
      - trakt_series_status == 'canceled': reject
  disable-Canceled:
    exec:
      - echo "Download canceled Series"

  enable-Download_Trending_Movies: 
    exec:
      - echo "Crawling Trending Movies"
    trakt_list:
      list: trending
      type: movies
      limit: 200
  disable-Download_Trending_Movies:
    exec:
      - echo "no Trending Movies to consider"

  enable-Download_Popular_Movies: 
    exec:
      - echo "Crawling Popular Movies"
    trakt_list:
      list: popular
      type: movies
      limit: 1000
  disable-Download_Popular_Movies:
    exec:
      - echo "no Popular Movies to consider"

  enable-Download_Popular_Shows: 
    exec:
      - echo "Crawling Popular Shows"
    trakt_list:
      list: popular
      type: shows
      limit: 100
  disable-Download_Popular_Shows:
    exec:
      - echo "no Popular Shows to consider"

  enable-Download_Trending_Shows: 
    exec:
      - echo "Crawling Trending Shows"
    trakt_list:
      list: trending
      type: shows
      limit: 15
  disable-Download_Trending_Shows:
    exec:
      - echo "no Trending Shows to consider"

  enable-IMDb_Actress: 
    include: Actress.yml
  disable-IMDb_Actress:
    exec:
      - echo "no Actress's to consider"

  enable-IMDb_Actors: 
    include: Actors.yml
  disable-IMDb_Actors:
    exec:
      - echo "no Actors to consider"

  enable-3D: 
    if:
      - "'3D' in title":
          exec: 
            - echo "packageName={{title}}-({{imdb_name}})-({{imdb_year}})-{{imdb_id}}" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
            - echo "downloadFolder={? DLFolder ?}/{? DLFolder3D ?}/{{title}}/" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
          disable: seen
          list_add:
            - movie_list: 3D
  disable-3D:
    exec:
      - echo "no 3D to consider"
    regexp:
      reject:
      # Release
        - \b3D\b

  Movie_Global:
    if:
      - trakt_movie_user_rating > 9: ## 9-10 is ideal for usage with Plex (4 Plex Stars = 8 trakt/imdb Stars ---- 5 Plex Stars = 10 trakt/imdb Stars)
          quality: '{? quality.high ?}'

  enable-Download_Best_on_IMDb:
    if:
      - "'musical' in (imdb_genres or [])": reject
      - "'documentary' in (imdb_genres or [])": reject
      - imdb_year < now.year - 2:
          imdb:
            min_score: 5.0
            min_votes: 150000
      - imdb_year < now.year - 5:
          imdb:
            min_score: 5.5
            min_votes: 200000
      - imdb_year < now.year - 15:
          imdb:
            min_score: 6.0
            min_votes: 350000
      - imdb_year < now.year - 100:
          imdb:
            min_score: 7.0
            min_votes: 500000
      - "set(['animation', 'family']).issubset(set(imdb_genres or []))":
          imdb:
            min_score: 6
            min_votes: 50000

  disable-Download_Best_on_IMDb:
    exec:
      - echo "no Top-Movies to consider"

  ######################################## Languages
  German:
  # Accept Only German, by Title
    regexp:
      reject_excluding:
        - \bgerman\b
  English:
  # Accept Only Non-German
    regexp:
      reject:
        - \bgerman\b
  #################
  enable-English:
    exec:
      - echo "English Enabled"
  disable-English:
    manual: yes
    exec:
      - echo "English Disabled"
  ######################################## DownloadManager
  ################## JDownloader
  ######## Defaults
  jdownloader-Defaults:
    exec:
      - echo " " >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
      - echo "text={{url}}" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
      - echo "autoConfirm=TRUE" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
      - echo "priority=LOWER" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
      - echo "addOfflineLink=false" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
  ######## Archive-Series
  jdownloader-Archive-Series:
    exec:
      - echo "downloadPassword=serienjunkies.org"  >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
      - echo "extractPasswords=serienjunkies.org"  >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
    if:
      - trakt_ep_id:
          exec: 
            - echo "packageName={{title}}-({{trakt_series_name}})-{{trakt_ep_id}}" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
            - echo "downloadFolder={? DLFolder ?}/{? DLFolderArchive ?}/Series/{{title}}/" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
      - not trakt_ep_id:
          exec: 
            - echo "packageName={{title}}-({{series_name}})-({{series_id}})" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
            - echo "downloadFolder={? DLFolder ?}/{? DLFolderArchive ?}/Series/{{title}}-({{series_name}})-({{series_id}})/" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
  ######## Archive-Movies
  jdownloader-Archive-Movies:
    if:
      - imdb_id:
          exec: 
            - echo "packageName={{title}}-({{imdb_name}})-({{imdb_year}})-{{imdb_id}}" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
            - echo "downloadFolder={? DLFolder ?}/{? DLFolderArchive ?}/Movies/{{title}}-({{imdb_name}})-({{imdb_year}})-{{imdb_id}}/" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"

      - not imdb_id:
          exec: 
            - echo "packageName={{title}}-({{movie_name}})" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
            - echo "downloadFolder={? DLFolder ?}/{? DLFolderArchive ?}/Movies/{{title}}-({{movie_name}})/" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"

  ######## Watchlist
  jdownloader-Watchlist-Series:
    exec:
      - echo "downloadPassword=serienjunkies.org"  >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
      - echo "extractPasswords=serienjunkies.org"  >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
    if:
      - trakt_ep_id:
          exec: 
            - echo "packageName={{title}}-({{trakt_series_name}})-{{trakt_ep_id}}" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
            - echo "downloadFolder={? DLFolder ?}/{? DLFolderWatchlist ?}/Series/{{title}}/" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
      - not trakt_ep_id:
          exec: 
            - echo "packageName={{title}}-({{series_name}})-({{series_id}})" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
            - echo "downloadFolder={? DLFolder ?}/{? DLFolderWatchlist ?}/Series/{{title}}-({{series_name}})-({{series_id}})/" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
  ######## Watchlist
  jdownloader-Watchlist-Movies:
    if:
      - imdb_id:
          exec: 
            - echo "packageName={{title}}-({{imdb_name}})-({{imdb_year}})-{{imdb_id}}" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
            - echo "downloadFolder={? DLFolder ?}/{? DLFolderWatchlist ?}/Movies/{{title}}-({{imdb_name}})-({{imdb_year}})-{{imdb_id}}/" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"

      - not imdb_id:
          exec: 
            - echo "packageName={{title}}-({{movie_name}})" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
            - echo "downloadFolder={? DLFolder ?}/{? DLFolderWatchlist ?}/Movies/{{title}}-({{movie_name}})/" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
  ######## YouTube
  jdownloader-YouTube:
    exec:
      - echo "downloadFolder={? DLFolder ?}/{? DLFolderYouTube ?}/{{title}}/" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
  ######## 3D
  jdownloader-3D:
    exec:
      - echo "downloadFolder={? DLFolder ?}/{? DLFolder3D ?}/{{title}}/" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
    if:
      - imdb_id:
          exec: echo "packageName={{title}}-({{imdb_name}})-({{imdb_year}})-{{imdb_id}}" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
      - not imdb_id:
          exec: echo "packageName={{title}}-({{movie_name}})" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
  ######## eBooks
  jdownloader-eBooks:
    exec:
      - echo "downloadFolder={? DLFolder ?}/{? DLFoldereBooks ?}/{{title}}/" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
  ######## Sports
  jdownloader-Sports:
    exec:
      - echo "downloadFolder={? DLFolder ?}/{? DLFolderSports ?}/{{title}}/" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
  ######## Queue-enable
  jdownloader-enable-Queue:
    exec:
      - echo "autoStart=TRUE" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
      - echo "forcedStart=TRUE" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
  ######## Queue-Disable
  jdownloader-disable-Queue:
    exec:
      - echo "Queue-Disabled -> Downloads parked"
      - echo "autoStart=FALSE" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
      - echo "forcedStart=FALSE" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
#   ################## pyLoad (buggy? needs testing, i'm not a pyLoad-User anymore)
#   ######## Defaults
  pyload-Defaults:
    exec:
      - echo "Downloading with pyLoad"
#   ######## Archive-Movies
  pyload-Archive-Movies:
    pyload:
      enabled: yes
      folder: '{? DLFolder ?}/{? DLFolderArchive ?}/Movies/{{title}}'
      api: '{? pyload.protocol ?}://{? pyload.ip ?}:{? pyload.port ?}/api'
      username: '{? pyload.usr ?}'
      password: '{? pyload.pwd ?}'
      multiple_hoster: yes
      queue: yes
      hoster:
        - '{? pyload.hoster1 ?}'
        - '{? pyload.hoster2 ?}'
#   ######## Archive-Movies
  pyload-Archive-Series:
    pyload:
      enabled: yes
      folder: '{? DLFolder ?}/{? DLFolderArchive ?}/Series/{{title}}'
      package: '{{series_name}} - {{series_id}}'
      api: '{? pyload.protocol ?}://{? pyload.ip ?}:{? pyload.port ?}/api'
      username: '{? pyload.usr ?}'
      password: '{? pyload.pwd ?}'
      multiple_hoster: yes
      queue: yes
      hoster:
        - '{? pyload.hoster1 ?}'
        - '{? pyload.hoster2 ?}'
#   ######## Watchlist
  pyload-Watchlist-Movies:
    pyload:
      enabled: yes
      folder: '{? DLFolder ?}/{? DLFolderWatchlist ?}/Movies/{{title}}'
      api: '{? pyload.protocol ?}://{? pyload.ip ?}:{? pyload.port ?}/api'
      username: '{? pyload.usr ?}'
      password: '{? pyload.pwd ?}'
      multiple_hoster: yes
      queue: yes
      hoster:
        - '{? pyload.hoster1 ?}'
        - '{? pyload.hoster2 ?}'
#   ######## Watchlist
  pyload-Watchlist-Series:
    pyload:
      enabled: yes
      folder: '{? DLFolder ?}/{? DLFolderWatchlist ?}/Series/{{title}}'
      package: '{{series_name}} - {{series_id}}'
      api: '{? pyload.protocol ?}://{? pyload.ip ?}:{? pyload.port ?}/api'
      username: '{? pyload.usr ?}'
      password: '{? pyload.pwd ?}'
      multiple_hoster: yes
      queue: yes
      hoster:
        - '{? pyload.hoster1 ?}'
        - '{? pyload.hoster2 ?}'
#   ######## 3D
  pyload-3D:
    pyload:
      enabled: yes
      folder: '{? DLFolder ?}/{? DLFolder3D ?}/{{title}}'
      api: '{? pyload.protocol ?}://{? pyload.ip ?}:{? pyload.port ?}/api'
      username: '{? pyload.usr ?}'
      password: '{? pyload.pwd ?}'
      multiple_hoster: yes
      queue: yes
      hoster:
        - '{? pyload.hoster1 ?}'
        - '{? pyload.hoster2 ?}'
#   ######## Ebooks
  pyload-eBooks:
    pyload:
      enabled: yes
      folder: '{? DLFolder ?}/{? DLFolderEBooks ?}/{{title}}'
      api: '{? pyload.protocol ?}://{? pyload.ip ?}:{? pyload.port ?}/api'
      username: '{? pyload.usr ?}'
      password: '{? pyload.pwd ?}'
      multiple_hoster: yes
      queue: yes
      hoster:
        - '{? pyload.hoster1 ?}'
        - '{? pyload.hoster2 ?}'
#   ######## 3D
  pyload-Sports:
    pyload:
      enabled: yes
      folder: '{? DLFolder ?}/{? DLFolderSports ?}/{{title}}'
      api: '{? pyload.protocol ?}://{? pyload.ip ?}:{? pyload.port ?}/api'
      username: '{? pyload.usr ?}'
      password: '{? pyload.pwd ?}'
      multiple_hoster: yes
      queue: yes
      hoster:
        - '{? pyload.hoster1 ?}'
        - '{? pyload.hoster2 ?}'
#   ######## YouTube
  pyload-Youtube:
    pyload:
      enabled: yes
      folder: '{? DLFolder ?}/{? DLFolderYouTube ?}/{{title}}'
      api: '{? pyload.protocol ?}://{? pyload.ip ?}:{? pyload.port ?}/api'
      username: '{? pyload.usr ?}'
      password: '{? pyload.pwd ?}'
      multiple_hoster: yes
      queue: yes
      hoster:
        - '{? pyload.hoster1 ?}'
        - '{? pyload.hoster2 ?}'
#   ######## Queue-Enable
  pyload-enable-Queue:
    exec:
      - echo "Queue globally enabled for pyload"
#   ######## Queue-Disable
  pyload-disable-Queue:
    exec:
      - echo "Queue globally enabled for pyload"
###############################################################################################################################################
### Tasks #####################################################################################################################################
###############################################################################################################################################

tasks:
############################################################################################################ DATABASE UPDATES
############################################################################################################

  ############################################################## Updates
  #
  ######################################## Crawl
  Crawl_Plugins:
    interval: 1 hours
    template:
      - no_seen
      - no_global
    priority: 1
    no_entries_ok: yes
    exec:
      on_start:
        phase: 
          - "cd {? flexget.path ?}/External-Plugins/HDArea-Feed/ && rm *.xml; python ./HDAreaOrg-RSS.py"
          - "cd {? flexget.path ?}/External-Plugins/HDWorld-Movies-Feed/ && rm *.xml; python ./HDWorld-Movies-RSS.py"
          - "cd {? flexget.path ?}/External-Plugins/HDWorld-Series-Feed/ && rm *.xml; python ./HDWorld-Series-RSS.py"
          - "cd {? flexget.path ?}/External-Plugins/Serienjunkies-Feed/ && rm *.xml; python ./Serienjunkies-RSS.py"          

  ######################################## Get imdb watchlist
  ## imdb API (used by imdb_list-plugin) is now restricted to 250 entries - everything above results in error
  ## CSV workaround:
  Get_IMDb_Watchlist:
    interval: 1 hours
    template:
      - no_seen
      - no_global
    priority: 1
    no_entries_ok: yes
    exec:
      on_start:
        phase: 
          - "mkdir {? filesystem.htmlpath ?}/{? imdb.listID1 ?}/; cd {? filesystem.htmlpath ?}/{? imdb.listID1 ?}/ && rm WATCHLIST.csv; wget http://www.imdb.com/list/{? imdb.listID1 ?}/export && mv ./export ./WATCHLIST.csv; chmod +x *"
          - "mkdir {? filesystem.htmlpath ?}/{? imdb.listID2 ?}/; cd {? filesystem.htmlpath ?}/{? imdb.listID2 ?}/ && rm WATCHLIST.csv; wget http://www.imdb.com/list/{? imdb.listID2 ?}/export && mv ./export ./WATCHLIST.csv; chmod +x *"
          - "mkdir {? filesystem.htmlpath ?}/{? imdb.listID3 ?}/; cd {? filesystem.htmlpath ?}/{? imdb.listID3 ?}/ && rm WATCHLIST.csv; wget http://www.imdb.com/list/{? imdb.listID3 ?}/export && mv ./export ./WATCHLIST.csv; chmod +x *"
          - echo "Download IMDb Watchlists successful"


  ######################################## Sync Trakt/IMDb Movie-Watchlist to Flexget-Queue
  ## imdb API (used by imdb_list-plugin) is now restricted to 250 entries - everything above results in error
  ## CSV workaround:
  Sync_Movies:
    interval: 24 hours
    template: 
      - no_global
      - no_seen
      - '{? disable_enable_tasks.Download_Popular_Movies ?}-Download_Popular_Movies'
      - '{? disable_enable_tasks.Download_Trending_Movies ?}-Download_Trending_Movies'
      - movies_lookup
    priority: 1
    trakt_list:
      account: '{? trakt.acc ?}'
      list: watchlist
      type: movies
    list_match:
      from:
        - trakt_list:
            account: '{? trakt.acc ?}'
            list: collection
            type: movies
      action: reject 
      remove_on_match: yes
    list_add:
      - trakt_list:
          account: '{? trakt.acc ?}'
          list: watchlist
          type: movies        
      - movie_list: Default
    if:
      - trakt_votes < 20: reject
      - trakt_score < 4.0: reject
      - trakt_collected: reject
#      - trakt_movie_user_rating < 2: reject
      - imdb_votes < 400: reject
    imdb:
      min_score: 4.0
      min_votes: 400
      reject_genres:
        - musical
        - documentary
     
#   ######################################## Sync Trakt/IMDb Movie-Watchlist to Flexget-Queue
#   ## imdb API (used by imdb_list-plugin) is now restricted to 250 entries - everything above results in error
#   ## CSV workaround:
#   Get_New_Movies:
#     interval: 12 hours
#     template: 
#       - no_global
#       - '{? disable_enable_tasks.Download_Popular_Movies ?}-Download_Popular_Movies'
#     priority: 1
#     csv:
#       url: http://localhost/{? imdb.listID1 ?}/WATCHLIST.csv
#       values:
#         title: 6
#         imdb_id: 2
#         imdb_url: 7
#         url: 0
#     verify_ssl_certificates: no
#     accept_all: yes
#     trakt_list:
#       account: '{? trakt.acc ?}'
#       list: watchlist
#       type: movies
#     seen: local
#     accept_all: yes
#     list_match:
#       from:
#         - trakt_list:
#             account: '{? trakt.acc ?}'
#             list: watchlist
#             type: movies
#       action: accept 
#       remove_on_match: no
#     if:
#       - trakt_collected: reject
#     list_add:
#       - trakt_list:
#           account: '{? trakt.acc ?}'
#           list: Sync
#           type: movies
#   ######################################## Sync Trakt/IMDb Movie-Watchlist to Flexget-Queue
#   ## imdb API (used by imdb_list-plugin) is now restricted to 250 entries - everything above results in error
#   ## CSV workaround:
#   Sync_New_Movies:
#     interval: 48 hours #this task is very slow with trakt-language-translation enabled.
#     template: 
#       - no_global
#       - movies_lookup
#       - no_seen
#     priority: 1
#     accept_all: yes
#     trakt_list:
#       account: '{? trakt.acc ?}'
#       list: Sync
#       type: movies
#       language: de
#     seen: local
#     accept_all: yes
#     list_add:
#       - movie_list: Default
#     list_remove:
#       - trakt_list:
#           account: '{? trakt.acc ?}'
#           list: Sync
#           type: movies
     ######################################## offline check/delay - add back to watchlist, if the movie is not trakt-collected within 2 weeks
  Offline_Check:
    interval: 24 hours
    delay: 4 weeks
    template: 
      - no_global
      - no_seen
    priority: 2
    trakt_list:
      account: '{? trakt.acc ?}'
      list: collection
      type: movies
    list_match:
      from:
        - movie_list: offline_check
      remove_on_match: yes
    accept_all: yes
    seen: local
    list_add:
      - movie_list: Default
      - trakt_list:
          account: '{? trakt.acc ?}'
          list: watchlist
          type: movies
  ######################################## Set_Series_Begin based on "Collected" in Trakt - for every show
  Update_Series_Begin:
    interval: 24 hours
    priority: 3
    template:
      - no_seen
      - no_global
      - series_lookup
    next_trakt_episodes:
      account: '{? trakt.acc ?}'
      context: collected
      list: collection
      strip_dates: yes
    accept_all: yes
    set_series_begin: yes   

  ############################################################## Removings
  #
  ######################################## Remove canceled Series (Nobody wants to start watching canceled Series, or ?!)
  Remove_Canceled:
    priority: 1
    template:
      - no_seen
      - no_global
      - series_lookup
    trakt_list:
      account: '{? trakt.acc ?}'
      list: watchlist
      type: shows
    if:
      - trakt_series_status == 'canceled': accept
    list_remove:
      - trakt_list:
          account: '{? trakt.acc ?}'
          list: watchlist
          type: shows
      - trakt_list:
          account: '{? trakt.acc ?}'
          list: '{? trakt.foreign ?}'
          type: shows
  #########
  Keep_Canceled_Collection:
    exec:
      - echo "Canceled Collections won't be deleted"
    manual: yes
  ######################################## Remove Collected
  Remove_CollectedSeriesFromWatchlist:
    priority: 1
    interval: 24 hours
    template:
      - no_global
      - no_seen
    trakt_list:
      account: '{? trakt.acc ?}'
      list: watchlist
      type: shows
    crossmatch:
      from:
        - trakt_list:
            account: '{? trakt.acc ?}'
            list: collection
            type: shows
      fields:
        - imdb_id
      action: accept
    list_remove:
      - trakt_list:
          account: '{? trakt.acc ?}'
          list: watchlist
          type: shows
  ######################################## Remove Collected trakt-Watchlist
  Remove_CollectedMoviesFromWatchlist:
    priority: 1
    interval: 1 hours
    template:
      - no_global
      - no_seen
    trakt_list:
      account: '{? trakt.acc ?}'
      list: watchlist
      type: movies
    movie_list: Default
    crossmatch:
      from:
        - trakt_list:
            account: '{? trakt.acc ?}'
            list: collection
            type: movies
      fields:
        - imdb_id
      action: accept
    list_remove:
      - trakt_list:
          account: '{? trakt.acc ?}'
          list: watchlist
          type: movies
      - movie_list: Default

  ######################################## Remove Series from OnHold automatically, if Episode 3 is already watched - so it starts Downloading again
  Remove_Watched_OnHold:
    priority: 1
    template:
      - no_seen
      - no_global
      - series_lookup
    next_trakt_episodes:
      account: '{? trakt.acc ?}'
      list: '{? trakt.OnHold ?}'
      context: watched
      position: next
    if:
      - trakt_ep_id > 'S01E{? series.Start_Collection_counter ?}': accept
    list_remove:
      - trakt_list:    
          account: '{? trakt.acc ?}'
          list: '{? trakt.OnHold ?}'
          type: shows
      - trakt_list:
          account: '{? trakt.acc ?}'
          list: watchlist
          type: shows

############################################################################################################ Movies ############################################################################################################

 ######################################## Search for queued Movies
  Movies_Watchlist_Search_DE_Main:
#    proper_movies: yes  #accept Quality-fixes (Proper means there was a bug in the release before) TOO MANY BUGS
    interval: 24 hours
    priority: 9
    template:
      - '{? DownloadManager ?}-Defaults'
      - '{? DownloadManager ?}-{? ArchiveOrWatchlist ?}-Movies'
      - '{? DownloadManager ?}-{? DownloadManagerQueue ?}-Queue'
      - '{? disable_enable_tasks.Movie_Size_Main ?}-Movie_Size_Main'
      - '{? disable_enable_tasks.3D ?}-3D'
      - movies_lookup
      - German
      - Movie_Global
    quality: '{? quality.main ?}'
    discover:
      what:
        - trakt_list:
            account: '{? trakt.acc ?}'
            list: watchlist
            type: movies
            language: de
      from:
#        - search_rss: https://scenefiles.to/RSS-Movies-German-1080p?results=filecrypt&filter=1k&search={{search_term}} ##Offline
        - searchHdarea:
            hoster: '{? Settings.Hoster ?}'
        - searchHdworld:
            hoster: '{? Settings.Hoster ?}'
        - searchMovieBlog:
            hoster: '{? Settings.Hoster ?}'
    list_match:
      from:
        - movie_list: Default
      single_match: yes
      remove_on_match: yes
#    include: Movie_Size_Main.yml
    list_add:
      - movie_list: offline_check

 ######################################## Search for queued Movies on hdarea with the help of a custom  pipe
  Movies_Watchlist_Search_DE_Low:
    interval: 24 hours
    delay: 24 hours
    priority: 9
    template:
      - '{? DownloadManager ?}-Defaults'
      - '{? DownloadManager ?}-{? ArchiveOrWatchlist ?}-Movies'
      - '{? DownloadManager ?}-{? DownloadManagerQueue ?}-Queue'
      - '{? disable_enable_tasks.Movie_Size_Low ?}-Movie_Size_Low'
      - movies_lookup
      - German
    quality: '{? quality.low ?}'
    discover:
      what:
        - trakt_list:
            account: '{? trakt.acc ?}'
            list: watchlist
            type: movies
            language: de
      from:
#        - search_rss: https://scenefiles.to/RSS-Movies-German-720p?results=filecrypt&filter=1k&search={{search_term}} ## OFFLINE
        - searchHdarea:
            hoster: '{? Settings.Hoster ?}'
        - searchHdworld:
            hoster: '{? Settings.Hoster ?}'
        - searchMovieBlog:
            hoster: '{? Settings.Hoster ?}'
    list_match:
      from:
        - movie_list: Default
      remove_on_match: yes
      single_match: yes
    regexp:
      reject:
        - \b3D\b
#    include: Movie_Size_Low.yml
    list_add:
      - movie_list: offline_check

  ######################################## Search based on Stream
  Movies_Watchlist_Stream_DE_Main:
    priority: 4
    template:
      - '{? DownloadManager ?}-Defaults'
      - '{? DownloadManager ?}-{? ArchiveOrWatchlist ?}-Movies'
      - '{? DownloadManager ?}-{? DownloadManagerQueue ?}-Queue'
      - '{? disable_enable_tasks.Upgrade_Movies ?}-Upgrade-Movies'
      - '{? disable_enable_tasks.IMDb_Actress ?}-IMDb_Actress'
      - '{? disable_enable_tasks.IMDb_Actors ?}-IMDb_Actors'
      - '{? disable_enable_tasks.Download_Best_on_IMDb ?}-Download_Best_on_IMDb'
      - '{? disable_enable_tasks.Movie_Size_Main ?}-Movie_Size_Main'
      - movies_lookup
      - German
      - Movie_Streams
      - Movie_Global
      - enable-3D
    quality: '{? quality.main ?}'
    list_match:
      from:
        - movie_list: Default
      single_match: yes
      remove_on_match: yes
#    include: Movie_Size_Main.yml

  ######################################## Search based on Stream
  Movies_Watchlist_Stream_DE_Low:
    delay: 24 hours
    priority: 5
    template:
      - '{? DownloadManager ?}-Defaults'
      - '{? DownloadManager ?}-{? ArchiveOrWatchlist ?}-Movies'
      - '{? DownloadManager ?}-{? DownloadManagerQueue ?}-Queue'
      - '{? disable_enable_tasks.IMDb_Actress ?}-IMDb_Actress'
      - '{? disable_enable_tasks.IMDb_Actors ?}-IMDb_Actors'
      - '{? disable_enable_tasks.Movie_Size_Low ?}-Movie_Size_Low'
      - '{? disable_enable_tasks.Download_Best_on_IMDb ?}-Download_Best_on_IMDb'
      - movies_lookup
      - German
      - Movie_Streams
    quality: '{? quality.low ?}'
    if:
      - trakt_collected: reject
    list_match:
      from:
        - movie_list: Default
      single_match: yes
      remove_on_match: yes
    regexp:
      reject:
        - \b3D\b
#    include: Movie_Size_Low.yml
            
  ######################################## 3D
#   Movies_3D_Stream:
#     proper_movies: yes  #accept Quality-fixes (Proper means there was a bug in the release before)
#     priority: 3
#     template:
#       - '{? DownloadManager ?}-Defaults'
#       - '{? DownloadManager ?}-{? DownloadManagerQueue ?}-Queue'
#       - '{? DownloadManager ?}-3D'
#       - movies_lookup
#       - German
#       - Movie_Streams
#     quality: '{? quality.main ?}'
#     list_match:
#       from:
#         - trakt_list:
#             account: '{? trakt.acc ?}'
#             list: watchlist
#             type: movies
#         - trakt_list:
#             account: '{? trakt.acc ?}'
#             list: collection
#             type: movies
#       remove_on_match: no
#       single_match: yes
#     regexp:
#       reject_excluding:
#         - \b3D\b
#     seen: local
#     include: Movie_Size_3D.yml

  ######################################## Search based on Stream
#   Movies_Watchlist_Stream_EN_Sceper:
#     priority: 6
#     seen: local
#     template:
#       - '{? DownloadManager ?}-Defaults'
#       - '{? DownloadManager ?}-Watchlist-Movies'
#       - '{? DownloadManager ?}-{? DownloadManagerQueue ?}-Queue'
#       - '{? English ?}-English' #enable/disable this Task
#       - English
#       - movies_lookup
#     quality: '{? quality.main ?}'
#     list_match:
#       from:
#         - trakt_list:
#             account: '{? trakt.acc ?}'
#             list: watchlist
#             type: movies
#             language: de
#       remove_on_match: no
#     sceper: 'http://sceper.ws/category/movies'
#     disable: [urlrewrite_redirect]
#     list_add:
#       - trakt_list:
#           account: '{? trakt.acc ?}'
#           list: '{? trakt.foreign ?}'
#           type: movies
#     if:
#       - not imdb_languages or not 'english' in imdb_languages: reject
#       - 'german' in imdb_languages: reject
#   ######################################## 10 Star Rating = high quality
#  
#   Movies_10Star_HighQuality_Search:
#     priority: 6
#     seen: local
#     template:
#       - '{? DownloadManager ?}-Defaults'
#       - '{? DownloadManager ?}-Archive-Movies'
#       - '{? DownloadManager ?}-{? DownloadManagerQueue ?}-Queue'
#       - '{? disable_enable_tasks.Upgrade_Movies ?}-Upgrade-Movies'
#       - movies_lookup
#       - German
#     discover:
#       what:
#         - trakt_list:
#             account: '{? trakt.acc ?}'
#             list: '{? trakt.Favorites ?}'
#             type: movies
#             language: de
#       from:
#         - searchHdarea:
#             hoster: '{? Settings.Hoster ?}'
#         - searchHdworld:
#             hoster: '{? Settings.Hoster ?}'
#         - searchMovieBlog:
#             hoster: '{? Settings.Hoster ?}'
#     quality: '{? quality.high ?}'
#     list_match:
#       from:
#         - movie_list: favorites
#       single_match: yes
#       remove_on_match: yes
#     include: Movie_Size_High.yml

############################################################################################################ Series ############################################################################################################

  ######################################## Stream and Search for Serienunkies

  Series_Collection_DE_Search:
    interval: 24 hours
    priority: 9
    template:
      - '{? DownloadManager ?}-Defaults'
      - '{? DownloadManager ?}-{? ArchiveOrWatchlist ?}-Series'
      - '{? DownloadManager ?}-{? DownloadManagerQueue ?}-Queue'
      - 'Discover-{? series.backfill ?}-Backfill'
      - '{? series.backfill ?}-Upgrade-Series'
      - '{? disable_enable_tasks.OnHold ?}-OnHold'      
      - '{? disable_enable_tasks.Canceled ?}-Canceled'   
      - German
      - series_lookup   
    quality: '{? quality.main ?}'
    list_match:
      from:
        - trakt_list:
            account: '{? trakt.acc ?}'
            list: collection
            type: shows
  ######################################## Stream and Search for Serienunkies

  Series_Collection_DE_Stream:
    priority: 7
    template:
      - '{? DownloadManager ?}-Defaults'
      - '{? DownloadManager ?}-{? ArchiveOrWatchlist ?}-Series'
      - '{? DownloadManager ?}-{? DownloadManagerQueue ?}-Queue'
      - '{? series.backfill ?}-Upgrade-Series'
      - '{? disable_enable_tasks.OnHold ?}-OnHold'      
      - '{? disable_enable_tasks.Canceled ?}-Canceled'     
      - German
      - series_lookup
      - Series_Streams
    quality: '{? quality.main ?}'
    list_match:
      from:
        - trakt_list:
            account: '{? trakt.acc ?}'
            list: collection
            type: shows

#   ######################################## Based on Series-Collection "English"
# 
#   Series_Collection_EN:
#     priority: 8
#     delay: 48 hours
#     template:
#       - '{? DownloadManager ?}-Archive-Series'
#       - '{? DownloadManager ?}-{? DownloadManagerQueue ?}-Queue'
# #      - 'Discover-{? series.backfill ?}-Backfill'
# #      - '{? series.backfill ?}-Upgrade-Series'
#       - series_lookup
#       - English
# #      - Series_Streams_English
#     quality: '{? quality.main ?}'
#     seen: local
#     discover:
#       what:
#         - next_trakt_episodes:
#             account: '{? trakt.acc ?}'
#             context: collected
#             list: collection
#             position: next
#       from:
#         - searchHdarea:
#             hoster: '{? Settings.Hoster ?}'
#         - searchHdworld:
#             hoster: '{? Settings.Hoster ?}'
#         - searchMovieBlog:
#             hoster: '{? Settings.Hoster ?}'
#     list_add:
#       - trakt_list:
#           account: '{? trakt.acc ?}'
#           list: '{? trakt.English.Series ?}'
#           type: episodes    
# #    if:
# #      - trakt_languages == ['german']: reject
# #      - imdb_languages == ['german']: reject
  ######################################## Watchlist-Premieres | Needs work for: Prefer DE, otherwise EN
  ################################## What it does: Download Episode 1-3 and add to custom trakt-OnHold-List 
  Series_Watchlist:
    plugin_priority:
      regexp: 250
    series_premiere:
     allow_teasers: no
     allow_seasonless: yes
    priority: 8
    quality: '{? quality.main ?}'
    template:
      - '{? DownloadManager ?}-Defaults'
      - '{? DownloadManager ?}-{? ArchiveOrWatchlist ?}-Series'
      - '{? DownloadManager ?}-{? DownloadManagerQueue ?}-Queue'
      - '{? disable_enable_tasks.Download_Popular_Series ?}-Download_Popular_Series'
      - '{? disable_enable_tasks.Canceled ?}-Canceled'   
      - 'Discover-{? series.backfill ?}-Backfill'
      - series_lookup
      - German
      - Series_Streams
    list_match:
      from:
        - trakt_list:
            account: '{? trakt.acc ?}'
            list: watchlist
            type: shows
      remove_on_match: no
    list_add:
      - trakt_list:
          account: '{? trakt.acc ?}'
          list: '{? trakt.OnHold ?}'
          type: shows
    regexp:
      reject_excluding:
        - \bS01(.E0|E0)('{? series.Stop_watchlist_counter ?}')\b  # counter has to be set in options.yml
############################################################################################################ YouTube ############################################################################################################
  YouTube-Personal-Playlist:
    priority: 10
    rss:
      url: "http://www.youtube.com/feeds/videos.xml?playlist_id={? YouTube.Playlist ?}"
      ascii: yes
    accept_all: yes
    template:
      - '{? disable_enable_tasks.YouTube_Downloads ?}-YouTube_Downloads'
      - '{? DownloadManager ?}-Defaults'
      - '{? DownloadManager ?}-YouTube'
      - no_global
###############################################################################################################################################
## SPECIALS ############################################################################################config#by#snickers2k###################
###############################################################################################################################################

  Sports:
    priority: 10
    regexp:
      accept:
        - Chicago.Bulls
        - Golden.State.Warriors
        - New.York.Knicks
    template:
      - '{? disable_enable_tasks.Download_Sports ?}-Download_Sports'    
      - '{? DownloadManager ?}-Defaults'
      - '{? DownloadManager ?}-Sports'
      - no_global
    seen: local
    verify_ssl_certificates: no
    csv:
      url: 'file://{? flexget.path ?}/External-Plugins/TVRex/TVRex.csv'
      values:
        title: 1
        quality: 2
        url: 3
  ######################################## Search based on Stream (THIS PLUGIN IS BASED ON https://flexget.com/Plugins/from_imdb AND NEEDS "pip install imdbpy")
#   Studio_Downloads:
#     priority: 1
#     seen: local
#     template:
#       - no_global
#       - '{? disable_enable_tasks.Studio_Downloads ?}-Studio_Downloads'
#     from_imdb: 
#       content_types: movie
#       id:
#         # Best Animation Studios
#         - co0047265 ## Blue Sky Studios (e.g. Ice Age)
#         - co0179259 ## Twentieth Century Fox Animation (e.g. Ice Age, Rio)
#         - co0074039 ## Walt Disney Animation Studios (e.g. Frozen)
#         - co0129164 ## DreamWorks Animation (e.g. Shrek)
#         - co0072491 ## Industrial Light & Magic (e.g. Indiana Jones)
#         - co0103818 ## Framestore (e.g. JungleBook)
#       max_entries: 99999
#     list_add:
#       - trakt_list:
#           account: '{? trakt.acc ?}'
#           list: watchlist
#           type: movies
#     if:
#       - trakt_collected: reject


  Specials: #custom-task
    template:
      - '{? disable_enable_tasks.Download_Specials ?}-Download_Specials'
    priority: 10


  Specials2:  #custom-task
    template:
      - no_global
      - no_seen     
      - '{? disable_enable_tasks.Download_Specials2 ?}-Download_Specials2'
    priority: 10

  ######################################## Remove Collected trakt-Watchlist
  Add_Favorite_Actress_Movies_to_List:
    priority: 8
    interval: 70 hours
    template:
      - no_global
      - no_seen
      - '{? disable_enable_tasks.IMDb_Actress ?}-IMDb_Actress'
    list_match:
      from:
        - trakt_list:
            account: '{? trakt.acc ?}'
            list: collection
            type: movies
    list_add:
      - trakt_list:
          account: '{? trakt.acc ?}'
          list: FavActress
          type: movies      

  ######################################## eBooks
# 
#   eBooks:
#     template:
#       - no_global
#       - '{? disable_enable_tasks.Download_eBooks ?}-Download_eBooks'
#       - '{? DownloadManager ?}-Defaults'
#       - '{? DownloadManager ?}-eBooks'
#     priority: 10
##     include: eBooks.yml
#     rss: https://scenefiles.to/RSS-Ebooks-German?results=filecrypt&filter=1k
#     seen: local
# 
# 
#   

###############################################################################################################################################
## MOVE ################################################################################################config#by#snickers2k###################
###############################################################################################################################################

  move-Movies:
    manual: yes
    template:
      - no_global
      - no_seen
      - movies_lookup
    accept_all: yes 
    filesystem:
      path: '{? DLFolder ?}/{? DLFolderArchive ?}/Series/'
      recursive: yes 
      regexp: '.*\.(avi|mkv|mp4|m4v)$'
    move:
      to: "{? filesystem.mountpoint.movies ?}{{trakt_movie_name|default(movie_name)|pathscrub}} ({{trakt_movie_year|default(movie_year)}})"
      rename: "{{trakt_movie_name|default(movie_name)|pathscrub}} ({{trakt_movie_year|default(movie_year)}}){% if quality|default(False) %} - [{{quality}}]{% endif %}"
      along:
        extensions:
          - sub
          - srt
          - nfo
      clean_source: 200  #remove samples and trash
    exec:
      on_exit:
        phase: find "{? DLFolder ?}/{? DLFolderArchive ?}/Series/"* -type d -empty -delete


  move-Episodes:
    manual: yes
    template:
      - no_global
      - no_seen
      - series_lookup
    accept_all: yes 
    filesystem:
      path: '{? DLFolder ?}/{? DLFolderArchive ?}/Series/'
      recursive: yes 
      regexp: '.*\.(avi|mkv|mp4|m4v)$'
    move:
      to: "{? filesystem.mountpoint.series ?}/{{tvdb_series_name|default(series_name)|pathscrub}}/S{{tvdb_season|pad(2)|default(series_season|pad(2))}}/"
      rename: "{{tvdb_series_name|default(series_name)|pathscrub}} - {{tvdb_ep_id|default(series_id)}}{% if tvdb_ep_name|default(False) %} - {{tvdb_ep_name|pathscrub}}{% endif %}{% if quality|default(False) %} - [{{quality}}]{% endif %}"
      along:
        extensions:
          - sub
          - srt
          - nfo
      clean_source: 100 #remove samples and trash
    exec:
      on_exit:
        phase: find "{? DLFolder ?}/{? DLFolderArchive ?}/Series/"* -type d -empty -delete
        
###############################################################################################################################################
## MISC ################################################################################################config#by#snickers2k###################
###############################################################################################################################################


# Run every task on given schedule, except tasks with own interval:
schedules:
  - tasks: '*'
    schedule:
      hour: '{? flexget.scheduler ?}'
###############
web_server:
#  bind: 0.0.0.0
  port: 3539
#  ssl_certificate: '/etc/ssl/private/myCert.pem'
#  ssl_private_key: '/etc/ssl/private/myKey.key'
  web_ui: yes
  base_url: /foo