

########################################################################################################################################################
#### Global ##############################################################################################config#by#snickers2k##########################
########################################################################################################################################################
variables: options.yml # Includes Options.yml file (put in flexget folder besides config.yml)
#######    
templates:
  global:
    ######################################## Misc
    redirect_url: yes
    parsing:
      movie: '{? Parser.Movies ?}'
      series: '{? Parser.Series ?}'
    magnets: no
    ######## Some HTML setup
    headers:
      User-Agent: "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36"
    retry_failed:
      retry_time: 60 seconds
      retry_time_multiplier: 4
      max_retries: 6
    ######## Quality-Fixes
    assume_quality:
      hdtv: 720p
    ######## Naming-Fixes
    pathscrub: windows  # Use Windows conform filenames (since Windows is the worst of all OS, what's working on Windows, should always work on Linux/Mac)
    plugin_priority:
      manipulate: 255       # manipulate must fix the titles before lookups
      regexp: 200
    # fix nonsense
    manipulate:
      #Quality 
      - title:
          replace:            
            regexp: 'DTSD'
            format: 'DTS\.dubbed'
      - title:
          replace:            
            regexp: 'DTSD-HD'
            format: 'DTS-HD\.dubbed'
      - title:
          replace:            
            regexp: 'AC3D'
            format: 'AC3\.dubbed'
      - title:
          replace:            
            regexp: 'AACD'
            format: 'AC3\.dubbed'
      #Misc 
      - title:
          replace:            
            regexp: 'http://nima4k.org/release/..../'
            format: ''
      - title:
          replace:            
            regexp: '^.(Deutsch|Englisch).' #fix SJ naming (assume "german" missing in title = not german)
            format: ''
      - title:
          replace:
            regexp: 'tvs-|euhd-|mdgp-|rsg-|4sj-|tmsf-|hrs-|pl3x-|encounters-' #remove known release-groups from the beginning of filename's 
            format: ''
      - title:
          replace:
            regexp: '^\[[^\]]*\][^a-z0-9]*'
            format: ''
      - title:
          replace:
            regexp: '^{[^\]]*}[^a-z0-9]*'
            format: ''
      - title:
          replace:
            regexp: '^\([^\]]*\)[^a-z0-9]*'
            format: ''
      - title:
          replace:
            regexp: '\s?\]\[\s?'
            format: '@@'
      - title:
          replace:
            regexp: '\W?@@.*'
            format: ''
      - title:
          replace:
            regexp: 'tv-film|\!|\,|´|`|’|\?'
            format: ''
      - title:
          replace:
            regexp: '\(|\)|\[|\]' # ( ) and [ ]
            format: ''
      - title:
          replace:
            regexp: ' (-|–|—) ' #remove minus with spaces - "en dash", "hyphen" and "em dash" (looks the same, but are different)
            format: ' '
      - title:
          replace:            
            regexp: 'p60' #e.g. 2160p60 -> 2160p 60fps
            format: 'p 60fps'
      - title:
          replace:
            regexp: '\&'
            format: ' '
      - title:            
          replace:
            regexp: "[']" # remove apostrophes
            format: ""
      - title:            
          replace:
            regexp: '\"' # remove apostrophes
            format: ''
      - title:
          replace:
            regexp: '\:|\+' # ":" and "+"
            format: ''
      - title:
          replace:
            regexp: '\.' #remove dot by space
            format: ' '
      - title:
          replace:
            regexp: '  +' #remove multiple space by single-space
            format: ' '            
    ## Locale-fixes
      - title:
          replace:
            regexp: 'ö'
            format: 'oe'
      - title:
          replace:
            regexp: 'ä'
            format: 'ae'
      - title:
          replace:
            regexp: 'ü'
            format: 'ue'
      - title:
          replace:
            regexp: 'ß'
            format: 'ss'
      - title:
          replace:
            regexp: '[\$]' # "$" needs special double coudraple escape
            format: 's'
      - title:
          replace:
            regexp: 'é|è'
            format: 'e'
      - title:
          replace:
            regexp: 'á|à'
            format: 'a'
      - title:
          replace:
            regexp: 'ó|ò'
            format: 'o'
     ## Known Problematic filenames
      - title:
          replace:
            regexp: '(greys(?!anatomy))'
            format: 'greys.anatomy' 
      - title:
          replace:
            regexp: 'deadlyclass'
            format: 'deadly\.class'
      - title:
          replace:
            regexp: 'totdy'
            format: 'too\.old\.to\.die\.young'
      - title:
          replace:
            regexp: "^marvel(')?s.agents.of.(s.h.i.e.l.d.?|shield)"
            format: 'Marvels\.Agents\.of\.S\.H\.I\.E\.L\.D'
      - title:
          replace:
            regexp: 'vrfall'
            format: 'ein\.fall\.fuer\.Vera'
    ######################################## Global Exclude  (For testing: https://regex101.com)
    regexp:
      reject:
      # Release
        - \b(duo|tri|quadri|tetra|penta)logy\b # Movie-Collections (often we already have some single ones in our Library)
        - \buntouched\b   # Untouched (usually complete BDs with extras - incompatible with Plex/Emby etc.)
        - \bdirectors.cut\b   # too often the extended Version has  parts without foreign language
        - \bextended\b # too often the extended Version has  parts without foreign language
        - \bread.nfo\b # usually means there is something in the nfo-file to read about, most likely about hardcoded subs or other "bad"-Info
#        - \bhdtv\b # HDTV
      # Video
        - \b((hd|)ts|telesync)\b   # Bad-Quality
        - \b((hd|)cam)\b   # Bad-Quality
        - \brucke([^\s]+)\b # ruckel/ruckeln/ruckelt/ruckelig ## German for "lagging", Bad-Quality 
        - \b(bd|dvd|)scr(\b|eener)\b   # BD- / DVD- / SCR(EENER)
        - \br(5|6)\b   # R5/6 (Region Release: Asia & East-Europe - usually bad Quality)
        - \b(un|)sub(|s|bed)\b # Subtitles (Sub / Subs / Subbed / Unsubbed)
        - \b(hc|hardcoded)\b # Subtitles (HC / Hardcoded)
        - \bblur(\b|rt|red)\b # Blurred-Subtitles
        - \biso\b # ISO-Files
      # Audio
        - \bflac\b   # flac
        - \b(ac3(.|)|)md|(mic(.|)dubbed)\b # Microphone-Dubbed 
        - \b(ac3(.|)|)ld|(line(.|)dubbed)\b # Line-Dubbed #means it is manually dubbed
        
    ######################################## Global Log-Filter - what and how should be logged (flexget.log in the config directory)
#     log_filter:
#       task:
#         - marked seen
#         - because quality already downloaded
#         - because episode has already been downloaded
#         - Task does not have any
#       move:
#         - left because it exceeds safety value
#         - does not exists (anymore)
#       urlrewriter:
#         - URL rewritten to
#       enzyme.mkv:
#         - Reading
#         - Processing
#       enzyme.parsers.ebml.core:
#         - ignored
#         - Maximum level
#       subliminal.video:
#         - Scanning video
#       parser_internal:
#         - appears to be an episode pack
#       content_size:
#         - rejecting
#       search_rss:
#         - Error
#       assume_quality:
#         - ""
#       utils.requests:
#         - Waiting

########################################################################################################################################################################
### Templates ##########################################################################################################################################################
########################################################################################################################################################################

  ######################################## Movie-Global
  Movies_Lookup:
    metainfo_movie: yes
    tmdb_lookup:
      language: de
    imdb_lookup: yes
    trakt_lookup:
      account: '{? trakt.acc ?}'
    nfo_lookup: yes
    bluray_lookup: no
#    rottentomatoes_lookup: yes #Buggy - 403 Client Error: Forbidden

  ######################################## Series-Global
  Series_Lookup:
    plugin_priority:
      manipulate: 255       # manipulate must fix the titles before metainfo_series.
    metainfo_series: yes
    thetvdb_lookup:
      language: de
    trakt_lookup:
      account: '{? trakt.acc ?}' 
    set:
      tvdb_language: de
  ######################################## No_Seen
  no_seen:
    disable:
      - seen
      - seen_info_hash
      - seen_movies
      
  ######################################## Download Streams
  #720p / 1080p 
  Movie_Streams:
    limit:
      amount: '{? movies.amount.streams ?}'
      from:
        inputs:
          - rss: '{? flexget.path ?}/rss/HDWorld-Movies.xml'
          - rss: '{? flexget.path ?}/rss/HDArea-Movies.xml'
          - rss: '{? flexget.path ?}/rss/MovieBlog-Movies.xml'

    

  #4K
  Movie_Streams_4K:
    inputs:
      - rss: 
          url: 'https://nima4k.org/rss_movies.xml'
          title: link # as the title is too cropped
          link: dl_shareonline


#  Movie_Streams_3D:
#    inputs:
#      - rss: '{? flexget.path ?}/rss/HDWorld-3D-Feed/HDWorld.xml'    


  Series_Streams_Singles:
    limit:
      amount: '{? series.amount.streams ?}'
      from:
        inputs:
          - rss: '{? flexget.path ?}/rss/rss_feed_1.xml'
          - rss: '{? flexget.path ?}/rss/rss_feed_2.xml'
          - rss: '{? flexget.path ?}/rss/rss_feed_3.xml'
          - rss: '{? flexget.path ?}/rss/rss_feed_4.xml'
          - rss: '{? flexget.path ?}/rss/rss_feed_5.xml'
          - rss: '{? flexget.path ?}/rss/rss_feed_6.xml'
          - rss: '{? flexget.path ?}/rss/rss_feed_7.xml'
          - rss: '{? flexget.path ?}/rss/rss_feed_8.xml'
          - rss: '{? flexget.path ?}/rss/rss_feed_9.xml'
    

  Series_Streams_Seasons:
    inputs:
      - rss: '{? flexget.path ?}/rss/HDWorld-Series.xml' # HDWorld      
      - rss: '{? flexget.path ?}/rss/HDArea-Series.xml'
      - rss: '{? flexget.path ?}/rss/MovieBlog-Series.xml'


  ######################################## Enable/Disable Discover
  Discover-enable-Backfill:
    discover:
      what:
        - next_series_episodes:
            backfill: yes
            from_start: yes
        - next_trakt_episodes:
            account: '{? trakt.acc ?}'
            context: collected
            list: collection
            position: next
            strip_dates: yes
      from:
        - searchSerienjunkies:
            hoster: '{? Settings.Hoster ?}'
            language: '{? Settings.Language ?}'
            staffelpack: False

  Discover-disable-Backfill:
    discover:
      what:
        - next_series_episodes:
            backfill: no
            from_start: no
        - next_trakt_episodes:
            account: '{? trakt.acc ?}'
            context: collected
            list: collection
            position: next
            strip_dates: yes
      from:
        - searchSerienjunkies:
            hoster: '{? Settings.Hoster ?}'
            language: '{? Settings.Language ?}'
            staffelpack: False

  ######################################## Enable/Disable SERIES Upgrade

  enable-Upgrade-Series:
    configure_series:
      settings:
        target: '{? quality_series.main ?}'
        quality: '{? quality_series.low ?}'
        propers: 2 weeks        
        timeframe: 24 hours
        identified_by: ep
        tracking: '{? series.tracking ?}'
        upgrade: yes 
      from:
        trakt_list:
          account: '{? trakt.acc ?}'
          list: collection
          type: shows
          strip_dates: yes
          language: de
    exists_series:
      path: "{? filesystem.Library.series ?}/"
      allow_different_qualities: '{? series.different_qualities ?}'

  disable-Upgrade-Series:
    configure_series:
      settings:
        target: '{? quality_series.main ?}'
        quality: '{? quality_series.low ?}'
        propers: 2 weeks        
        timeframe: 24 hours
        identified_by: ep
        tracking: '{? series.tracking ?}'
        upgrade: no
      from:
        trakt_list:
          account: '{? trakt.acc ?}'
          list: collection
          type: shows
          strip_dates: yes
          language: de

  ######################################## Enable/Disable MOVIES Upgrade

  enable-Upgrade-Movies:
    exists_movie:
      path: 
        - "{? filesystem.Library.movies ?}/"
      allow_different_qualities: '{? movies.different_qualities ?}'
      type: files
      type: dirs
#      lookup: imdb

  disable-Upgrade-Movies:
    exec:
      on_start:
        phase: echo "Movie Upgrade Disabled"


  ######################################## Enable/Disable Special (Author) Tasks

  enable-Studio_Downloads:
    manual: no
  disable-Studio_Downloads:
    manual: yes 

  enable-Download_Best_on_IMDb:
    if:
      - "'musical' in (imdb_genres or [])": reject
      - "'documentary' in (imdb_genres or [])": reject
      - imdb_year < now.year - 2:
          imdb:
            min_score: 5.0
            min_votes: 150000
      - imdb_year < now.year - 5:
          imdb:
            min_score: 5.5
            min_votes: 200000
      - imdb_year < now.year - 15:
          imdb:
            min_score: 6.0
            min_votes: 350000
      - imdb_year < now.year - 100:
          imdb:
            min_score: 7.0
            min_votes: 500000
      - "set(['animation', 'family']).issubset(set(imdb_genres or []))":
          imdb:
            min_score: 6
            min_votes: 50000

  disable-Download_Best_on_IMDb:
    exec:
      - echo "Not loading Best on IMDb" 

  enable-YouTube_Downloads: 
    manual: no
  disable-YouTube_Downloads: 
    manual: yes

  enable-Download_Specials: 
    include: '{? Specials1 ?}.yml'
  disable-Download_Specials: 
    manual: yes
    
  enable-Download_Specials2: 
    include: '{? Specials2 ?}.yml'
  disable-Download_Specials2: 
    manual: yes
    
  enable-Download_Sports: 
    manual: no
  disable-Download_Sports: 
    manual: yes

  enable-Trailers: 
    manual: no
  disable-Trailers: 
    manual: yes

  enable-Extras: 
    manual: no
  disable-Extras: 
    manual: yes

  enable-4K: 
    manual: no
  disable-4K:
    manual: yes

  enable-Merge_Trakt_List: 
    manual: no
  disable-Merge_Trakt_List: 
    manual: yes

  enable-Ombi_Movies:
    manual: no   
  disable-Ombi_Movies: 
    manual: yes

  enable-Ombi_Series: 
    manual: no
  disable-Ombi_Series: 
    manual: yes

      
  enable-Seasons: 
    manual: no
  disable-Seasons: 
    manual: yes

  enable-Series_Collection_DE_Stream: 
    manual: no
  disable-Series_Collection_DE_Stream: 
    manual: yes

  enable-Sorting: 
    manual: no
  disable-Sorting: 
    manual: yes

  enable-Download_eBooks: 
    include: eBooks.yml
  disable-Download_eBooks:
    manual: yes

  enable-OnHold: 
    crossmatch:
      from:
        - trakt_list:
            account: '{? trakt.acc ?}'
            list: '{? trakt.OnHold ?}'
            type: shows
      fields:
        - imdb_id
      action: reject
  disable-OnHold:
    exec:
      - echo "Not use OnHold"

  enable-Canceled: 
    if:     
      - trakt_series_status == 'canceled': reject
  disable-Canceled:
    exec:
      - echo "Download canceled Series"

  enable-Download_Trending_Movies: 
    manual: no
  disable-Download_Trending_Movies:
    manual: yes

  enable-Download_Popular_Movies: 
    manual: no
    
  disable-Download_Popular_Movies:
    manual: yes

  Movie_Size_Main: 
    content_size:
      min: '{? Size.Main.Minimum ?}'
      max: '{? Size.Main.Maximum ?}'

  Movie_Size_Low: 
    content_size:
      min: '{? Size.Low.Minimum ?}'
      max: '{? Size.Low.Maximum ?}'

  Movie_Size_4K: 
    content_size:
      min: '{? Size.Low.Minimum ?}'
      max: '{? Size.Low.Maximum ?}'

  enable-Download_Popular_Series: 
    manual: no
  disable-Download_Popular_Series:
    manual: yes

  enable-Download_Trending_Series: 
    manual: no
  disable-Download_Trending_Series:
    manual: yes

  enable-Actors: 
    include: 
      - Actors.yml
      - Actress.yml
    
  disable-Actors:
    exec:
      - echo "no Actors to consider"

  enable-3D: 
    if:
      - "'3D' in title":
          exec: 
            - echo "packageName={{title}}-({{imdb_name}})-({{imdb_year}})-{{imdb_id}}" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
            - echo "downloadFolder={? filesystem.Downloads.Main ?}/{? filesystem.Downloads.3D ?}/{{title}}/" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
          disable: seen
          list_add:
            - movie_list: 3D
  disable-3D:
    regexp:
      reject:
        - \b3D\b

  Movies_Global:
    sort_by:
      - field: quality.resolution
        reverse: yes
      - title|lower
    regexp:
      reject:
        - \bcomplete\b #In Movie-Titles, this usually means Complete-Bluray (iso)
        - \b\S[0-9][0-9](|e[0-9][0-9])\b: {from: title}
        - \b'{? reject.crew ?}'\b
#    if:
#      - trakt_movie_user_rating >= 9: ## 9-10 is ideal for usage with Plex (4 Plex Stars = 8 trakt/imdb Stars ---- 5 Plex Stars = 10 trakt/imdb Stars)
#          quality: '{? quality_movies.high ?}'
    crossmatch:
      from:
        - movie_list: offline_check
      fields:
        - imdb_id
      action: reject

  Series_Global:
    sort_by:
      field: quality
      reverse: yes
    regexp:
      reject:
        - \bcomplete\b #In Movie-Titles, this usually means Complete-Bluray (iso)
        - \b'{? reject.crew ?}'\b
        
  ######################################## Languages
  German:
  # Accept Only German, by Title
    regexp:
      reject_excluding:
        - \bgerman\b
  English:
  # Accept Only Non-German
    regexp:
      reject:
        - \bgerman\b
  #################
  enable-English:
    exec:
      on_start:
        phase: echo "English Enabled"
  disable-English:
    manual: yes
    exec:
      on_start:
        phase: echo "English Disabled"
  ######################################## DownloadManager
  ################## JDownloader
  ######## Defaults
  jdownloader-Defaults:
    exec:
      on_output:
        for_accepted:        
          - echo " " >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
          - echo "text={{url}}" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
          - echo "autoConfirm=TRUE" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
          - echo "addOfflineLink=false" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
  ######## Archive-Series
  jdownloader-Archive-Series:
    exec:
      on_output:
        for_accepted:     
          - echo "downloadPassword=serienjunkies.org"  >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
          - echo "extractPasswords=serienjunkies.org"  >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
          - echo "priority={? JDownloader.priority.Archive ?}" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
    if:
      - trakt_ep_id:
          exec: 
            on_output:
              for_accepted:                    
                - echo "packageName={{title}}-({{trakt_series_name}})-{{trakt_ep_id}}" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
                - echo "downloadFolder={? filesystem.Downloads.Main ?}/{? filesystem.Downloads.Archive ?}/Series/{{title}}/" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
      - not trakt_ep_id:
          exec: 
            on_output:
              for_accepted:           
                - echo "packageName={{title}}-({{series_name}})-({{series_id}})" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
                - echo "downloadFolder={? filesystem.Downloads.Main ?}/{? filesystem.Downloads.Archive ?}/Series/{{title}}-({{series_name}})-({{series_id}})/" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
  ######## Archive-Movies
  jdownloader-Archive-Movies:
    exec:
      on_output:
        for_accepted:     
          - echo "priority={? JDownloader.priority.Archive ?}" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
    if:
      - imdb_id:
          exec: 
            on_output:
              for_accepted:           
                - echo "packageName={{title}}-({{imdb_name}})-({{imdb_year}})-{{imdb_id}}" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
                - echo "downloadFolder={? filesystem.Downloads.Main ?}/{? filesystem.Downloads.Archive ?}/Movies/{{title}}-({{imdb_name}})-({{imdb_year}})-{{imdb_id}}/" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"

      - not imdb_id:
          exec: 
            on_output:
              for_accepted:           
                - echo "packageName={{title}}-({{movie_name}})" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
                - echo "downloadFolder={? filesystem.Downloads.Main ?}/{? filesystem.Downloads.Archive ?}/Movies/{{title}}-({{movie_name}})/" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"

  ######## Watchlist
  jdownloader-Watchlist-Series:
    exec:
      on_output:
        for_accepted:     
          - echo "downloadPassword=serienjunkies.org"  >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
          - echo "extractPasswords=serienjunkies.org"  >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
          - echo "priority={? JDownloader.priority.Watchlist ?}" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
    if:
      - trakt_ep_id:
          exec: 
            on_output:
              for_accepted:           
                - echo "packageName={{title}}-({{trakt_series_name}})-{{trakt_ep_id}}" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
                - echo "downloadFolder={? filesystem.Downloads.Main ?}/{? filesystem.Downloads.Watchlist ?}/Series/{{title}}/" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
      - not trakt_ep_id:
          exec: 
            on_output:
              for_accepted:           
                - echo "packageName={{title}}-({{series_name}})-({{series_id}})" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
                - echo "downloadFolder={? filesystem.Downloads.Main ?}/{? filesystem.Downloads.Watchlist ?}/Series/{{title}}-({{series_name}})-({{series_id}})/" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
  ######## Watchlist
  jdownloader-Watchlist-Movies:
    exec:
      on_output:
        for_accepted:     
          - echo "priority={? JDownloader.priority.Watchlist ?}" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
    if:
      - imdb_id:
          exec: 
            on_output:
              for_accepted:           
                - echo "packageName={{title}}-({{imdb_name}})-({{imdb_year}})-{{imdb_id}}" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
                - echo "downloadFolder={? filesystem.Downloads.Main ?}/{? filesystem.Downloads.Watchlist ?}/Movies/{{title}}-({{imdb_name}})-({{imdb_year}})-{{imdb_id}}/" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
      - not imdb_id:
          exec: 
            on_output:
              for_accepted:           
                - echo "packageName={{title}}-({{movie_name}})" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
                - echo "downloadFolder={? filesystem.Downloads.Main ?}/{? filesystem.Downloads.Watchlist ?}/Movies/{{title}}-({{movie_name}})/" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
  ######## YouTube
  jdownloader-YouTube:
    exec:
      on_output:
        for_accepted:     
          - echo "downloadFolder={? filesystem.Downloads.Main ?}/{? filesystem.Downloads.YouTube ?}/{{title}}/" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
  ######## YouTube
  jdownloader-Spielshows:
    exec:
      on_output:
        for_accepted:     
          - echo "downloadFolder={? filesystem.Downloads.Main ?}/{? filesystem.Downloads.Spielshows ?}/{{title}}/" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
  ######## 3D
  jdownloader-3D:
    exec:
      on_output:
        for_accepted:     
          - echo "downloadFolder={? filesystem.Downloads.Main ?}/{? filesystem.Downloads.3D ?}/{{title}}/" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
    if:
      - imdb_id:
          exec: 
            on_output:
              for_accepted:           
                 - echo "packageName={{title}}-({{imdb_name}})-({{imdb_year}})-{{imdb_id}}" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
      - not imdb_id:
          exec: 
            on_output:
              for_accepted:           
                - echo "packageName={{title}}-({{movie_name}})" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
  ######## eBooks
  jdownloader-eBooks:
    exec:
      on_output:
        for_accepted:     
          - echo "downloadFolder={? filesystem.Downloads.Main ?}/{? filesystem.Downloads.eBooks ?}/{{title}}/" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
  ######## Sports
  jdownloader-Sports:
    exec:
      on_output:
        for_accepted:     
          - echo "downloadFolder={? filesystem.Downloads.Main ?}/{? filesystem.Downloads.Sports ?}/{{title}}/" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
  ######## Queue-enable
  jdownloader-enable-Queue:
    exec:
      on_output:
        for_accepted:     
          - echo "autoStart=TRUE" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
          - echo "forcedStart=TRUE" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
  ######## Queue-Disable
  jdownloader-disable-Queue:
    exec:
      on_output:
        for_accepted:     
          - echo "Queue-Disabled -> Downloads parked"
          - echo "autoStart=FALSE" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"
          - echo "forcedStart=FALSE" >> "{? JDownloader.path ?}/folderwatch/{{task}}-{{title}}.crawljob"

#   ################## pyLoad (buggy? needs testing, i'm not a pyLoad-User anymore)
#   ######## Defaults
  pyload-Defaults:
    exec:
      - echo "Downloading with pyLoad"
#   ######## Archive-Movies
  pyload-Archive-Movies:
    pyload:
      enabled: yes
      folder: '{? filesystem.Downloads.Main ?}/{? filesystem.Downloads.Archive ?}/Movies/{{title}}'
      api: '{? pyload.protocol ?}://{? pyload.ip ?}:{? pyload.port ?}/api'
      username: '{? pyload.usr ?}'
      password: '{? pyload.pwd ?}'
      multiple_hoster: yes
      queue: yes
      hoster:
        - '{? pyload.hoster1 ?}'
        - '{? pyload.hoster2 ?}'
#   ######## Archive-Movies
  pyload-Archive-Series:
    pyload:
      enabled: yes
      folder: '{? filesystem.Downloads.Main ?}/{? filesystem.Downloads.Archive ?}/Series/{{title}}'
      package: '{{series_name}} - {{series_id}}'
      api: '{? pyload.protocol ?}://{? pyload.ip ?}:{? pyload.port ?}/api'
      username: '{? pyload.usr ?}'
      password: '{? pyload.pwd ?}'
      multiple_hoster: yes
      queue: yes
      hoster:
        - '{? pyload.hoster1 ?}'
        - '{? pyload.hoster2 ?}'
#   ######## Watchlist
  pyload-Watchlist-Movies:
    pyload:
      enabled: yes
      folder: '{? filesystem.Downloads.Main ?}/{? filesystem.Downloads.Watchlist ?}/Movies/{{title}}'
      api: '{? pyload.protocol ?}://{? pyload.ip ?}:{? pyload.port ?}/api'
      username: '{? pyload.usr ?}'
      password: '{? pyload.pwd ?}'
      multiple_hoster: yes
      queue: yes
      hoster:
        - '{? pyload.hoster1 ?}'
        - '{? pyload.hoster2 ?}'
#   ######## Watchlist
  pyload-Watchlist-Series:
    pyload:
      enabled: yes
      folder: '{? filesystem.Downloads.Main ?}/{? filesystem.Downloads.Watchlist ?}/Series/{{title}}'
      package: '{{series_name}} - {{series_id}}'
      api: '{? pyload.protocol ?}://{? pyload.ip ?}:{? pyload.port ?}/api'
      username: '{? pyload.usr ?}'
      password: '{? pyload.pwd ?}'
      multiple_hoster: yes
      queue: yes
      hoster:
        - '{? pyload.hoster1 ?}'
        - '{? pyload.hoster2 ?}'
#   ######## 3D
  pyload-3D:
    pyload:
      enabled: yes
      folder: '{? filesystem.Downloads.Main ?}/{? filesystem.Downloads.3D ?}/{{title}}'
      api: '{? pyload.protocol ?}://{? pyload.ip ?}:{? pyload.port ?}/api'
      username: '{? pyload.usr ?}'
      password: '{? pyload.pwd ?}'
      multiple_hoster: yes
      queue: yes
      hoster:
        - '{? pyload.hoster1 ?}'
        - '{? pyload.hoster2 ?}'
#   ######## Ebooks
  pyload-eBooks:
    pyload:
      enabled: yes
      folder: '{? filesystem.Downloads.Main ?}/{? filesystem.Downloads.EBooks ?}/{{title}}'
      api: '{? pyload.protocol ?}://{? pyload.ip ?}:{? pyload.port ?}/api'
      username: '{? pyload.usr ?}'
      password: '{? pyload.pwd ?}'
      multiple_hoster: yes
      queue: yes
      hoster:
        - '{? pyload.hoster1 ?}'
        - '{? pyload.hoster2 ?}'
#   ######## Sports
  pyload-Sports:
    pyload:
      enabled: yes
      folder: '{? filesystem.Downloads.Main ?}/{? filesystem.Downloads.Sports ?}/{{title}}'
      api: '{? pyload.protocol ?}://{? pyload.ip ?}:{? pyload.port ?}/api'
      username: '{? pyload.usr ?}'
      password: '{? pyload.pwd ?}'
      multiple_hoster: yes
      queue: yes
      hoster:
        - '{? pyload.hoster1 ?}'
        - '{? pyload.hoster2 ?}'
#   ######## YouTube
  pyload-Youtube:
    pyload:
      enabled: yes
      folder: '{? filesystem.Downloads.Main ?}/{? filesystem.Downloads.YouTube ?}/{{title}}'
      api: '{? pyload.protocol ?}://{? pyload.ip ?}:{? pyload.port ?}/api'
      username: '{? pyload.usr ?}'
      password: '{? pyload.pwd ?}'
      multiple_hoster: yes
      queue: yes
      hoster:
        - '{? pyload.hoster1 ?}'
        - '{? pyload.hoster2 ?}'
#   ######## Queue-Enable
  pyload-enable-Queue:
    exec:
      - echo "Queue globally enabled for pyload"
#   ######## Queue-Disable
  pyload-disable-Queue:
    exec:
      - echo "Queue globally enabled for pyload"
################################################################################################################################################################################
### Tasks ######################################################################################################################################################################
################################################################################################################################################################################

tasks:
############################################################################################################ DATABASE UPDATES
############################################################################################################

  ######################################## Crawl
  Crawl_Plugins:
    template:
      - no_seen
      - no_global
    priority: 1
    interval: 2 hours
    no_entries_ok: yes
    exec:
      on_start:
        phase: 
          - "cd {? flexget.path ?}/rss/ && rm *.xml; cd {? flexget.path ?}/ && python3 ./streams.py {? filesystem.Flexget ?}/rss/"
#           - "cd {? flexget.path ?}/rss/HDArea-Movies-Feed/ && rm *.xml; python ./HDAreaOrg-RSS.py"
#           - "cd {? flexget.path ?}/rss/HDWorld-Feed/ && rm *.xml; python ./HDWorld-RSS.py"
#           - "cd {? flexget.path ?}/rss/SJ_ && rm *.xml; python ./Serienjunkies-RSS.py"          
#           - "cd {? flexget.path ?}/rss/HDArea-Series-Feed/ && rm *.xml; python ./HDAreaOrg-RSS.py"

  ######################################## Sync to Trakt Movie-Watchlist

  Sync_Movies_Trending:
    interval: 48 hours
    priority: 8
    accept_all: yes
    template: 
      - no_global
      - no_seen
      - '{? enable_disable.Download_Trending_Movies ?}-Download_Trending_Movies'
    trakt_lookup: yes
    limit:
      amount: '{? movies.amount.trending ?}'
      from: 
        trakt_list:
          account: '{? trakt.acc ?}'
          list: trending
          type: movies
    list_add:
      - trakt_list:
          account: '{? trakt.acc ?}'
          list: '{? movies.list.trending ?}'
          type: movies   
    if:
      - trakt_collected: reject
  
  Sync_Movies_Popular:
    interval: 7 days
    priority: 8
    template: 
      - no_global
      - no_seen
      - '{? enable_disable.Download_Popular_Movies ?}-Download_Popular_Movies'
    trakt_lookup: yes
    accept_all: yes
    limit:
      amount: '{? movies.amount.popular ?}'
      from: 
        trakt_list:
          account: '{? trakt.acc ?}'
          list: '{? movies.list.popular ?}'
          type: movies
    list_add:
      - trakt_list:
          account: '{? trakt.acc ?}'
          list: watchlist
          type: movies        
    if:
      - trakt_collected: reject

  Sync_Series_Popular:
    interval: 7 days
    priority: 8
    template: 
      - no_global
      - no_seen
      - '{? enable_disable.Download_Popular_Movies ?}-Download_Popular_Movies'
    trakt_lookup: yes
    accept_all: yes
    limit:
      amount: '{? series.amount.popular ?}'
      from: 
        trakt_list:
          account: '{? trakt.acc ?}'
          list: '{? series.list.popular ?}'
          type: shows
    list_add:
      - trakt_list:
          account: '{? trakt.acc ?}'
          list: '{? series.list.popular ?}'
          type: shows        
    if:
      - trakt_collected: reject


  Sync_Series_Trending:
    interval: 7 days
    priority: 8
    template: 
      - no_global
      - no_seen
      - '{? enable_disable.Download_Popular_Movies ?}-Download_Popular_Movies'
    trakt_lookup: yes
    accept_all: yes
    limit:
      amount: '{? series.amount.trending ?}'
      from: 
        trakt_list:
          account: '{? trakt.acc ?}'
          list: '{? series.list.trending ?}'
          type: shows
    list_add:
      - trakt_list:
          account: '{? trakt.acc ?}'
          list: '{? series.list.trending ?}'
          type: shows        
    if:
      - trakt_collected: reject

  Sync_Ombi_Movies:
    interval: 2 days
    priority: 8
    template: 
      - no_global
      - no_seen
      - '{? enable_disable.Ombi_Movies ?}-Ombi_Movies'
    ombi_list:
      base_url: '{? ombi.url ?}'
      port: '{? ombi.port ?}'
      api_key: '{? ombi.api ?}'
      type: movies
    trakt_lookup: yes
    accept_all: yes
    list_add:
      - trakt_list:
          account: '{? trakt.acc ?}'
          list: watchlist
          type: movies        
    if:
      - trakt_collected: reject

  Sync_Ombi_Series:
    interval: 2 days
    priority: 8
    template: 
      - no_global
      - no_seen
      - '{? enable_disable.Ombi_Movies ?}-Ombi_Series'
    ombi_list:
      base_url: '{? ombi.url ?}'
      port: '{? ombi.port ?}'
      api_key: '{? ombi.api ?}'
      type: shows
    trakt_lookup: yes
    accept_all: yes
    list_add:
      - trakt_list:
          account: '{? trakt.acc ?}'
          list: watchlist
          type: movies        
    if:
      - trakt_collected: reject

  ######################################## Sync Trakt Movie-Watchlist to Flexget-Queue (strips dates and unconform-characters)
  Sync_Movies_to_Flexget:
    priority: 1
    interval: 48 hours #takes a long time if translated to german #needs fix -> entry task with seen for 4 weeks
    template: 
      - no_seen
    accept_all: yes 
    crossmatch:
      from:
        - movie_list: offline_check
      fields:
        - trakt_id
      action: reject
    inputs:
      - trakt_list:
          account: '{? trakt.acc ?}'
          list: watchlist
          type: movies
          language: de
          strip_dates: yes
      - trakt_list:
          account: '{? trakt.acc ?}'
          list: '{? movies.list.popular ?}'
          type: movies
          language: de
          strip_dates: yes
      - trakt_list:
          account: '{? trakt.acc ?}'
          list: '{? movies.list.trending ?}'
          type: movies
          language: de
          strip_dates: yes
    list_add:
      - movie_list: Default #save with unique-ID for explicit matches after searching with regexp
      - entry_list: Default #save with regexp (global-filter) so we get searchable titles


  ######################################## Merge two Trakt Lists

  Merge_Trakt_Lists:
    priority: 8
    interval: 24 hours
    template: 
      - no_seen
      - no_global
      - '{? enable_disable.Merge_Trakt_List ?}-Merge_Trakt_List'
    trakt_lookup: yes
    accept_all: yes
    inputs:
      - trakt_list:
          username: '{? Merge_Trakt_List.from.username ?}'
          list: '{? Merge_Trakt_List.from.listname ?}'
      - trakt_list:
          username: '{? Merge_Trakt_List.from.username2 ?}'
          list: '{? Merge_Trakt_List.from.listname2 ?}'
    if:
      - trakt_votes > '{? Merge_Trakt_List.min_votes ?}': accept
      - trakt_rating > '{? Merge_Trakt_List.min_rating ?}': accept 
    list_add:  
      - trakt_list:
          account: '{? trakt.acc ?}'
          list: '{? Merge_Trakt_List.to ?}'
          type: movies
                    
  ######################################## # Actors, Actress, Directors, Writers or Studio's ## DEVELOPING
  Sync_Special_Movies: 
    priority: 9
    interval: 30 days #this tasks takes multiple hours. plus no need to run more often
    require_field: [imdb_id]
    include:
      - Actors.yml
      - Actress.yml
    template: 
      - no_global
      - no_seen
      - Movies_Lookup
      - '{? enable_disable.Actors ?}-Actors'
    limit:
      amount: 5000
      from: 
        trakt_list:
          list: popular
          type: movies
    list_add:  
      - trakt_list:
          account: '{? trakt.acc ?}'
          list: Actors
          type: movies

  ######################################## offline check/delay - add back to watchlist, if the movie is not trakt-collected within 2 weeks -- if Collected successfully, Clear-Task will keep track
  Offline_Check_Failed:
    interval: 24 hours
    delay: 2 weeks
    template:
      - no_global
      - no_seen
    priority: 2
    movie_list: offline_check
    if:
      - not trakt_collected: accept
    list_remove:
      - movie_list: offline_check #remove rejection used by other tasks
    list_add:
      - movie_list: Default #add again to downloads

  ######################################## Set_Series_Begin based on "Collected" in Trakt - for every show
  Update_Series_Begin:
    interval: 24 hours
    priority: 3
    template:
      - no_seen
      - no_global
      - Series_Lookup
    next_trakt_episodes:
      account: '{? trakt.acc ?}'
      context: collected
      list: collection
      position: next
    accept_all: yes
    set_series_begin: yes #this sets the series_begin for every task

  ############################################################## Removings
  #
  ######################################## Remove canceled Series (Nobody wants to start watching canceled Series, or ?!)
#   Remove_Canceled:
#     priority: 1
#     template:
#       - no_seen
#       - no_global
#       - Series_Lookup
#     trakt_list:
#       account: '{? trakt.acc ?}'
#       list: watchlist
#       type: shows
#     if:
#       - trakt_series_status == 'canceled': accept
#     list_remove:
#       - trakt_list:
#           account: '{? trakt.acc ?}'
#           list: watchlist
#           type: shows
#       - trakt_list:
#           account: '{? trakt.acc ?}'
#           list: '{? trakt.foreign ?}'
#           type: shows
  ######################################## Remove Collected
  Clean_up_Series:
    priority: 1
    interval: 24 hours
    template:
      - no_global
      - no_seen
    trakt_list:
      account: '{? trakt.acc ?}'
      list: watchlist
      type: shows
    list_remove:
      - trakt_list:
          account: '{? trakt.acc ?}'
          list: watchlist
          type: shows
    if:
      - trakt_collected: accept
  ######################################## Remove Collected or less than 30 votes from trakt-Watchlist
  Clean_up_Movies:
    priority: 1
    template:
      - no_global
      - no_seen
    trakt_lookup: yes
    trakt_list:
      account: '{? trakt.acc ?}'
      list: watchlist
      type: movies
    if:
      - trakt_votes < 20: accept #wrong item added?
      - trakt_collected: accept
    list_remove:
      - trakt_list:
          account: '{? trakt.acc ?}'
          list: watchlist
          type: movies
      - entry_list: Default
      - movie_list: Default
      - movie_list: offline_check

  ######################################## Remove Series from OnHold automatically, if Episode 3 is already watched - so it starts Downloading again
  Remove_Watched_OnHold:
    priority: 1
    template:
      - no_seen
      - no_global
      - Series_Lookup
    next_trakt_episodes:
      account: '{? trakt.acc ?}'
      list: '{? trakt.OnHold ?}'
      context: watched
      position: next
    if:
      - trakt_ep_id > 'S01E{? series.Start_Collection_counter ?}': accept
    list_remove:
      - trakt_list:    
          account: '{? trakt.acc ?}'
          list: '{? trakt.OnHold ?}'
          type: shows
      - trakt_list:
          account: '{? trakt.acc ?}'
          list: watchlist
          type: shows


####################################################################################################################################################################################
### DOWNLOADS ######################################################################################################################################################################
####################################################################################################################################################################################
#
#
############################################################################################################ Movies ############################################################################################################
############################################################################################################

 ######################################## Search for queued Movies
  Movies_Watchlist_Search_DE_Main:
#    proper_movies: yes  #accept Quality-fixes (Proper means there was a bug in the release before) TOO MANY BUGS
    interval: 24 hours
    priority: 8
    template:
      - '{? DownloadManager ?}-Defaults'
      - '{? DownloadManager ?}-{? ArchiveOrWatchlist ?}-Movies'
      - '{? DownloadManager ?}-{? DownloadManagerQueue ?}-Queue'
      - Movie_Size_Main
#      - '{? enable_disable.3D ?}-3D'
      - Movies_Lookup
      - German
      - Movies_Global
#     regexp:
#       reject_excluding:
#         - \bdl|dual\b # Dual-Language
    quality: '{? quality_movies.main ?}'
    limit:
      amount: '{? movies.amount.discover ?}'
      from:
        discover:
          what:
            - entry_list: Default
          from:
            - searchHdarea:
                hoster: '{? Settings.Hoster ?}'
            - searchHdworld:
                hoster: '{? Settings.Hoster ?}'
            - searchMovieBlog:
                hoster: '{? Settings.Hoster ?}'
          release_estimations: ignore
#     discover:
#       what:
#         - entry_list: Default
#       from:
#         - searchHdarea:
#             hoster: '{? Settings.Hoster ?}'
#         - searchHdworld:
#             hoster: '{? Settings.Hoster ?}'
#         - searchMovieBlog:
#             hoster: '{? Settings.Hoster ?}'
# #      release_estimations: ignore
    list_match:
      from:
        - movie_list: Default
      single_match: yes
      remove_on_match: yes
    list_add:
      - movie_list: offline_check

 ######################################## Search for queued Movies on hdarea with the help of a custom  pipe
  Movies_Watchlist_Search_DE_Low:
    interval: 24 hours
    delay: 48 hours
    priority: 9
    template:
      - '{? DownloadManager ?}-Defaults'
      - '{? DownloadManager ?}-{? ArchiveOrWatchlist ?}-Movies'
      - '{? DownloadManager ?}-{? DownloadManagerQueue ?}-Queue'
      - Movie_Size_Low
      - Movies_Lookup
      - German
    quality: '{? quality_movies.low ?}'
    limit:
      amount: '{? movies.amount.discover ?}'
      from:
        discover:
          what:
            - entry_list: Default
          from:
            - searchHdarea:
                hoster: '{? Settings.Hoster ?}'
            - searchHdworld:
                hoster: '{? Settings.Hoster ?}'
            - searchMovieBlog:
                hoster: '{? Settings.Hoster ?}'
          release_estimations: ignore
    list_match:
      from:
        - movie_list: Default
      remove_on_match: yes
      single_match: yes
    regexp:
      reject:
        - \b3D\b
    list_add:
      - movie_list: offline_check


  ######################################## Search based on Stream
  Movies_Watchlist_Stream_Main:
    priority: 5
    template:
      - '{? DownloadManager ?}-Defaults'
      - '{? DownloadManager ?}-{? ArchiveOrWatchlist ?}-Movies'
      - '{? DownloadManager ?}-{? DownloadManagerQueue ?}-Queue'
      - '{? enable_disable.Upgrade_Movies ?}-Upgrade-Movies'
      - '{? enable_disable.Actors ?}-Actors'
      - Movie_Size_Main
      - Movies_Lookup
      - German
      - Movie_Streams
      - Movies_Global
    quality: '{? quality_movies.main ?}'
    list_match:
      from:
        - movie_list: Default
      single_match: yes
      remove_on_match: yes # Main quality done, so remove. 4K has another 
    list_add:
      - movie_list: offline_check

  ######################################## Search based on Stream
  Movies_Watchlist_Stream_Low:
    delay: 24 hours
    priority: 6
    template:
      - '{? DownloadManager ?}-Defaults'
      - '{? DownloadManager ?}-{? ArchiveOrWatchlist ?}-Movies'
      - '{? DownloadManager ?}-{? DownloadManagerQueue ?}-Queue'
      - '{? enable_disable.Upgrade_Movies ?}-Upgrade-Movies'
      - '{? enable_disable.Actors ?}-Actors'
      - '{? enable_disable.Download_Best_on_IMDb ?}-Download_Best_on_IMDb'
      - Movie_Size_Low
      - Movies_Lookup
      - German
      - Movie_Streams
      - Movies_Global
    quality: '{? quality_movies.low ?}'
    seen: local #still upgradable by Main
    list_match:
      from:
        - movie_list: Default
      single_match: yes
      remove_on_match: no #let it stay in movie_list: default, to still allow for Main and 4K task
    regexp:
      reject:
        - \b3D\b
    list_add:
      - movie_list: offline_check

  ######################################## Search based on 4K Stream -- Needs a trakt_list named "4K"
  Movies_Watchlist_Stream_4K:
    priority: 7
    template:
      - '{? DownloadManager ?}-Defaults'
      - '{? DownloadManager ?}-{? ArchiveOrWatchlist ?}-Movies'
      - '{? DownloadManager ?}-{? DownloadManagerQueue ?}-Queue'
      - '{? enable_disable.Upgrade_Movies ?}-Upgrade-Movies'
      - '{? enable_disable.UltraHD ?}-4K'
      - '{? enable_disable.Actors ?}-Actors'
      - Movies_Lookup
      - Movie_Size_4K
      - Movie_Streams_4K
      - Movies_Global
    regexp:
      reject:
        - \benglis.?h\b
    quality: '{? quality_movies.high ?}'
    list_match:
      from:
        - trakt_list:
            account: '{? trakt.acc ?}'
            list: collection
            type: movies
    crossmatch:
      from:
        - trakt_list:
            account: '{? trakt.acc ?}'
            list: 4K
            type: movies
      fields:
        - imdb_id
      action: reject
    seen: local
    list_add: 
    # TODO: offline_check_4K , as this will block 1080p from being downloaded, if 720p is first in library
      - movie_list: offline_check
      - trakt_list:
          account: '{? trakt.acc ?}'
          list: 4K
          type: movies

############################################################################################################ Series ############################################################################################################
#
#
########################################## Stream and Search for Serienunkies

  Series_Collection_DE_Search:
    interval: 24 hours
    priority: 9
    template:
      - '{? DownloadManager ?}-Defaults'
      - '{? DownloadManager ?}-{? ArchiveOrWatchlist ?}-Series'
      - '{? DownloadManager ?}-{? DownloadManagerQueue ?}-Queue'
      - 'Discover-{? series.backfill ?}-Backfill'
      - '{? series.backfill ?}-Upgrade-Series'
      - '{? enable_disable.OnHold ?}-OnHold'  
      - '{? enable_disable.Canceled ?}-Canceled'   
      - German
      - Series_Lookup   
      - Series_Global
    quality: '{? quality_series.main ?}'
    list_match:
      from:
        - trakt_list:
            account: '{? trakt.acc ?}'
            list: collection
            type: shows
    regexp:
      reject:
        - \bs[0-9][0-9]\b
        
  ######################################## Stream and Search for Serienunkies

  Series_Collection_DE_Stream:
    priority: 7
    template:
      - '{? DownloadManager ?}-Defaults'
      - '{? DownloadManager ?}-{? ArchiveOrWatchlist ?}-Series'
      - '{? DownloadManager ?}-{? DownloadManagerQueue ?}-Queue'
      - '{? series.backfill ?}-Upgrade-Series'
      - '{? enable_disable.OnHold ?}-OnHold'      
      - '{? enable_disable.Canceled ?}-Canceled'  
      - '{? enable_disable.Series_Collection_DE_Stream ?}-Series_Collection_DE_Stream'   
      - German
      - Series_Lookup
      - Series_Global
      - Series_Streams_Singles
    quality: '{? quality_series.main ?}'
    redirect_url: yes
    list_match:
      from:
        - trakt_list:
            account: '{? trakt.acc ?}'
            list: collection
            type: shows
    regexp:
      reject:
        - \bs[0-9][0-9]\b
    serienjunkies:
      language: '{? Settings.LanguageSJ ?}'
      hoster: '{? Settings.HosterSJ ?}'
  ######################################## Stream and Search for Serienunkies

  Series_Collection_DE_Seasons:
    priority: 7
    template:
      - '{? DownloadManager ?}-Defaults'
      - '{? DownloadManager ?}-{? ArchiveOrWatchlist ?}-Series'
      - '{? DownloadManager ?}-{? DownloadManagerQueue ?}-Queue'
      - '{? series.backfill ?}-Upgrade-Series'
      - '{? enable_disable.OnHold ?}-OnHold'    
      - '{? enable_disable.Seasons ?}-Seasons'    
      - '{? enable_disable.Canceled ?}-Canceled'
      - German
      - Series_Lookup
      - Series_Global
      - Series_Streams_Seasons
    configure_series:
      settings:
        target: '{? quality_series.main ?}'
        quality: '{? quality_series.low ?}'
        propers: 2 weeks        
        timeframe: 24 hours
        identified_by: ep
        tracking: '{? series.tracking ?}'
        season_packs: '{? series.season_packs ?}'
      from:
        trakt_list:
          account: '{? trakt.acc ?}'
          list: collection
          type: shows
          strip_dates: yes
          language: de
    quality: '{? quality_series.main ?}'
    list_match:
      from:
        - trakt_list:
            account: '{? trakt.acc ?}'
            list: collection
            type: shows
    regexp:
      reject_excluding:
        - \bcomplete\b #In Series-Titles, this usually means complete Seasons
        - \bs[0-9][0-9]\b #only accept Seasons
        
  ######################################## Watchlist-Premieres | Needs work for: Prefer DE, otherwise EN
  ################################## What it does: Download Episode 1-3 and add to custom trakt-OnHold-List 
  Series_Watchlist:
    manual: yes
    plugin_priority:
      regexp: 250
#    series_premiere:
#     allow_teasers: no
#     allow_seasonless: yes
    priority: 8
    quality: '{? quality_series.main ?}'
    template:
      - '{? DownloadManager ?}-Defaults'
      - '{? DownloadManager ?}-{? ArchiveOrWatchlist ?}-Series'
      - '{? DownloadManager ?}-{? DownloadManagerQueue ?}-Queue'
      - '{? enable_disable.Canceled ?}-Canceled'   
      - Series_Lookup
      - German
      - Series_Streams_Singles
      - Series_Global
    list_match:
      from:
        - trakt_list:
            account: '{? trakt.acc ?}'
            list: watchlist
            type: shows
      remove_on_match: no
    list_add:
      - trakt_list:
          account: '{? trakt.acc ?}'
          list: '{? trakt.OnHold ?}'
          type: shows
    regexp:
      reject_excluding:
        - \bS01(.E0|E0)('{? series.Stop_watchlist_counter ?}')\b  # counter has to be set in options.yml
      reject:
        - \bs[0-9][0-9]\b #reject seasons

############################################################################################################ YouTube ############################################################################################################
  YouTube-Personal-Playlist:
    priority: 10
    seen: local
    only_new: yes
    rss: 
      url: "http://www.youtube.com/feeds/videos.xml?playlist_id={? YouTube.Playlist ?}"
      ascii: yes
    accept_all: yes
    template:
      - '{? enable_disable.YouTube_Downloads ?}-YouTube_Downloads'
      - '{? DownloadManager ?}-Defaults'
      - '{? DownloadManager ?}-YouTube'
      - no_global


  Trailers:
    priority: 10
    seen: no #local
#    only_new: yes
    tmdb_lookup:
      language: de
    require_field: [tmdb_name, tmdb_year]
#     filesystem: 
#       path: 
#         - '{? filesystem.Library.movies ?}/'
#       retrieve: dirs
#       recursive: no
    limit:
      amount: 10
      from: 
        trakt_list: 
          account: '{? trakt.acc ?}'
          list: collection
          type: movies
    exec:
      auto_escape: yes
      on_output:
        for_entries: 
          - echo "got {{tmdb_name}}"
          - "youtube-dl ytsearch10:'{{tmdb_name}} {{tmdb_year}} Trailer Deutsch' --match-title '(?i)(?=.*{{tmdb_name}})(?=.*{{tmdb_year}})(?=.*(german|deutsch))(?=.*trailer).+' -f 'best' --match-filter 'duration < 150' -o '/home/snikay/Trailers/Movies/{{tmdb_name|default(movie_name)}} ({{tmdb_year}})/{{tmdb_name}}.{{tmdb_year}}.German-trailer'" 
          #-f 'best[filesize>30M]+[filesize<70M]/bestvideo[height>=480]+bestaudio/best[height>=480]/best'
    accept_all: yes
    template:
      - no_global
      - no_seen
      - '{? enable_disable.Trailers ?}-Trailers'


############################################################################################################ MediathekView ############################################################################################################


  MediathekView-Information:
    priority: 10
    manual: yes
    seen: local
    only_new: yes
    rss: 
      url: 'https://mediathekviewweb.de/feed'
      title: category
      link: "enclosure url"
    accept_all: yes
    template:
      - '{? enable_disable.MediathekView ?}-MediathekView'
      - '{? DownloadManager ?}-Defaults'
      - '{? DownloadManager ?}-MediathekView-Information'
      - no_global      
    regexp:
      accept:
        - Hauptsache.gesund
        - Visite
        - Quarks
        - tagesschau.*20.00.Uhr


  MediathekView-Spielshows:
    priority: 10
    manual: yes
    seen: local
    only_new: yes
    rss: 'https://mediathekviewweb.de/feed'
    accept_all: yes
    template:
      - '{? enable_disable.MediathekView ?}-MediathekView'
      - '{? DownloadManager ?}-Defaults'
      - '{? DownloadManager ?}-MediathekView-Spielshows'
      - no_global      
    regexp:
      accept:
        - Verstehen.Sie.Spa(ss|ß).*
        - Wetten.dass.* # die Hoffnung stirbt zuletzt

  MediathekView-Series:
    priority: 10
    manual: yes
    seen: local
    only_new: yes
    rss: 'https://mediathekviewweb.de/feed'
    accept_all: yes
    template:
      - '{? enable_disable.MediathekView ?}-MediathekView'
      - '{? DownloadManager ?}-Defaults'
      - '{? DownloadManager ?}-{? ArchiveOrWatchlist ?}-Series'
      - '{? DownloadManager ?}-{? DownloadManagerQueue ?}-Queue'
      - no_global
      - Series_Lookup
    regexp:
      accept:
        - In.aller.Freundschaft
        - Tatort
      
####################################################################################################################################################################################
## SPECIALS ############################################################################################config#by#snickers2k########################################################
####################################################################################################################################################################################

  Sports:
    priority: 10
    regexp:
      accept:
        - Chicago.Bulls
        - Golden.State.Warriors
        - New.York.Knicks
    template:
      - '{? custom.Download_Sports ?}-Download_Sports'    
      - '{? DownloadManager ?}-Defaults'
      - '{? DownloadManager ?}-Sports'
      - no_global
    seen: local
    verify_ssl_certificates: no
    csv:
      values:
        title: 1
        quality: 2
        url: 3
      url: 'file://{? flexget.path ?}/rss/TVRex/TVRex.csv'

  Specials: #custom-task
    priority: 10
    template:
      - '{? custom.Download_Specials ?}-Download_Specials'
      - no_global

  Specials2:  #custom-task
    priority: 10
    template:
      - no_global
      - no_seen     
      - '{? custom.Download_Specials2 ?}-Download_Specials2'


  Comedy_Shows:
    manual: yes
    priority: 10
    regexp:
      accept:
        - Wolfgang.Trepper
        - Dieter.Nuhr
    template:
      - '{? custom.Download_Sports ?}-Download_Sports'
      - '{? DownloadManager ?}-Defaults'
      - '{? DownloadManager ?}-Sports'
      - no_global
    seen: local
    verify_ssl_certificates: no
    csv:
      url: 'file://{? flexget.path ?}/rss/TVRex/TVRex.csv'
      values:
        title: 1
        quality: 2
        url: 3

  ######################################## eBooks
# 
#   eBooks:
#     template:
#       - no_global
#       - '{? custom.Download_eBooks ?}-Download_eBooks'
#       - '{? DownloadManager ?}-Defaults'
#       - '{? DownloadManager ?}-eBooks'
#     priority: 10
##     include: eBooks.yml
#     rss: https://scenefiles.to/RSS-Ebooks-German?results=filecrypt&filter=1k
#     seen: local
# 
# 
#   

  imdb_to_trakt:  
  # This task adds all the movies in your imdb watchlist to your trakt watchlist (hopefully^^)
    imdb_list:
      login: '{? imdb.acc ?}'
      password: '{? imdb.pwd ?}'
      list: watchlist
    accept_all: yes
    list_add:
      - trakt_list:
          account: '{? trakt.acc ?}'
          list: FromIMDb
          type: movies
    disable: seen


####################################################################################################################################################################################
## MISC ################################################################################################config#by#snickers2k########################################################
####################################################################################################################################################################################


# Run every task on given schedule, except tasks with own interval
schedules:
  - tasks: '*'
    schedule:
      hour: '{? flexget.scheduler ?}'
###############
web_server: yes